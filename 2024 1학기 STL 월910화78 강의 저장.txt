===============================================================================
stl.cpp, 저장시간: 2024-03-04 월요일 오후 7:52:17 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 STL 3.5 월910                                                       (1주1)
// 
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성 / std::c++latest, SDL 검사 - no
// 
// 한학기 강의를 저장하는 save 만들기
// -------------------------------------------------------------------------------

#include <iostream>

#include "save.h"

using namespace std;


int main() {
	cout << "STL 입니다." << '\n';

	save("stl.cpp");
}


===============================================================================
stl.cpp, 저장시간: 2024-03-04 월요일 오후 7:53:21 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 STL 3.5 월910                                                       (1주1)
// 
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성 / std::c++latest, SDL 검사 - no
// 
// 한학기 강의를 저장하는 save 만들기
// -------------------------------------------------------------------------------

#include <iostream>

#include "save.h"

using namespace std;


int main() {
	cout << "STL 입니다." << '\n';

	save("stl.cpp");
}


===============================================================================
stl.cpp, 저장시간: 2024-03-04 월요일 오후 8:00:16 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 STL 3.5 월910                                                       (1주1)
// 
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성 / std::c++latest, SDL 검사 - no
// 
// 한학기 강의를 저장하는 save 만들기
// -------------------------------------------------------------------------------

#include <iostream>

#include "save.h"

using namespace std;


int main() {
	cout << "STL 입니다." << '\n';

	save("stl.cpp");
}


===============================================================================
stl.cpp, 저장시간: 2024-03-05 화요일 오후 3:40:10 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 STL 3.5 월910                                                       (1주1)
// 
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성 / std::c++latest, SDL 검사 - no
// 
// 한학기 강의를 저장하는 save 만들기
// -------------------------------------------------------------------------------

#include <iostream>

#include "save.h"

using namespace std;


int main() {
	cout << "STL 입니다." << '\n';

	save("stl.cpp");
}


===============================================================================
stl.cpp, 저장시간: 2024-03-05 화요일 오후 3:40:43 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 STL 3.5 월910                                                       (1주1)
// 
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성 / std::c++latest, SDL 검사 - no
// 
// 한학기 강의를 저장하는 save 만들기
// -------------------------------------------------------------------------------

#include <iostream>

#include "save.h"

using namespace std;


int main() {
	cout << "save를 만들었습니다." << '\n';

	save("stl.cpp");
}


===============================================================================
save.h, 저장시간: 2024-03-05 화요일 오후 3:42:41 
===============================================================================
#pragma once

#include <string_view>


void save(std::string_view);


===============================================================================
save.cpp, 저장시간: 2024-03-05 화요일 오후 3:42:41 
===============================================================================
#include "save.h"

#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <chrono>

using namespace std;


void save(string_view fileName) {
	// fileName을 읽을 파일로 연다
	ifstream in { fileName.data() };
	//cout << sizeof in << endl;
	//cout << addressof(in) << endl;
	//cout << typeid(in).name() << endl;
	if(not in) {
		cout << fileName << " - 파일 열기 실패" << endl;
		exit(0);
	}

	// 저장할 파일을 덧붙여 쓰기 모드로 연다
	ofstream out { "2024 1학기 STL 월910화78 강의 저장.txt", ios::app };

	// 저장한 시간을 기록한다
	out << endl << endl << endl;
	auto now = chrono::system_clock::now();			// epoch
	auto time = chrono::system_clock::to_time_t(now);			// UTC 시간으로 변환
	auto lt = localtime(&time);	// 현지시간으로 변환

	auto old = out.imbue(locale("ko_KR"));
	// 날짜를 내 마음대로 출력한다
	out << "===============================================================================" << endl;
	out << fileName << put_time(lt, ", 저장시간: %x %A %X ") << endl;
	out << "===============================================================================" << endl;
	out.imbue(old);

	// 읽을 파일의 내용을 모두 읽어 쓸 파일에 덧붙여 쓴다
	// STL 자료구조와 알고리즘을 이용해 본다.
	// (좋은 코드는 아닌데, 예시로 이렇게도 가능하다는걸 보여주기 위함)
	vector<char> v { istreambuf_iterator { in }, {} };
	copy(v.begin(), v.end(), ostreambuf_iterator<char> { out });
}


===============================================================================
stl.cpp, 저장시간: 2024-03-05 화요일 오후 3:42:41 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 STL 3.5 월910                                                       (1주1)
// 
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성 / std::c++latest, SDL 검사 - no
// 
// 한학기 강의를 저장하는 save 만들기
// -------------------------------------------------------------------------------

#include <iostream>

#include "save.h"

using namespace std;


int main() {
	cout << "save를 만들었습니다." << '\n';

	save("save.h");
	save("save.cpp");
	save("stl.cpp");
}


===============================================================================
stl.cpp, 저장시간: 2024-03-05 화요일 오후 3:49:31 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 1학기 STL 월910화78     3월 5일 화요일                                (1주2)
// 
// -------------------------------------------------------------------------------

#include <iostream>

#include "save.h"

using namespace std;


// [문제] main을 수정하지 않고 의도대로 실행되게 change함수를 선언하고 정의하라

void change(int& a, int& b);


int main() {
	int a { 1 };
	int b { 2 };

	change(a, b);

	cout << a << ", " << b << endl;			// [화면출력] 2, 1

	save("stl.cpp");
}


void change(int& a, int& b) {
	int temp = a;
	a = b;
	b = temp;
}


===============================================================================
stl.cpp, 저장시간: 2024-03-05 화요일 오후 3:56:51 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 1학기 STL 월910화78     3월 5일 화요일                                (1주2)
// 
// -------------------------------------------------------------------------------

#include <iostream>

#include "save.h"

using namespace std;


// [문제] main을 수정하지 않고 의도대로 실행되게 change함수를 선언하고 정의하라

void change(int&, int&);


int main() {
	int a { 1 };
	int b { 2 };

	change(a, b);

	cout << a << ", " << b << endl;			// [화면출력] 2, 1

	save("stl.cpp");
}


void change(int& a, int& b) {
	int temp { a };
	a = b;
	b = temp;
}


===============================================================================
stl.cpp, 저장시간: 2024-03-05 화요일 오후 4:01:58 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 1학기 STL 월910화78     3월 5일 화요일                                (1주2)
// 
// -------------------------------------------------------------------------------

#include <iostream>

#include "save.h"

using namespace std;


// [문제] main을 수정하지 않고 의도대로 실행되게 change함수를 선언하고 정의하라

class Dog {
public:
	int data;
};

ostream& operator<<(ostream& out, const Dog& dog) {
	return out << dog.data;
}


template<typename T>
void change(T&, T&);


int main() {
	Dog a { 1 };
	Dog b { 2 };

	change(a, b);

	cout << a << ", " << b << endl;			// [화면출력] 2, 1

	save("stl.cpp");
}


template<typename T>
void change(T& a, T& b) {
	T temp { a };
	a = b;
	b = temp;
}


===============================================================================
stl.cpp, 저장시간: 2024-03-05 화요일 오후 4:02:28 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 1학기 STL 월910화78     3월 5일 화요일                                (1주2)
// 
// -------------------------------------------------------------------------------

#include <iostream>

#include "save.h"

using namespace std;


// [문제] main을 수정하지 않고 의도대로 실행되게 change함수를 선언하고 정의하라

class Dog {
public:
	int data;
};

ostream& operator<<(ostream& out, const Dog& dog) {
	return out << "Dog { " << dog.data << " }";
}


template<typename T>
void change(T&, T&);


int main() {
	Dog a { 1 };
	Dog b { 2 };

	change(a, b);

	cout << a << ", " << b << endl;			// [화면출력] 2, 1

	save("stl.cpp");
}


template<typename T>
void change(T& a, T& b) {
	T temp { a };
	a = b;
	b = temp;
}


===============================================================================
stl.cpp, 저장시간: 2024-03-05 화요일 오후 4:17:52 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 1학기 STL 월910화78     3월 5일 화요일                                (1주2)
// 
// -------------------------------------------------------------------------------

#include <iostream>

#include "save.h"

using namespace std;


// [문제] main을 수정하지 않고 의도대로 실행되게 change함수를 선언하고 정의하라

class Dog {
public:
	int data;

public:
	operator int() {				// 형변환
		return data;
	}
};

ostream& operator<<(ostream& out, const Dog& dog) {
	//return out << "Dog { " << dog.data << " }";
	return out << dog.data;
}


template<typename T>
void change(T&, T&);


int main() {
	Dog a { 1 };
	Dog b { 2 };

	change(a, b);

	cout << a << ", " << b << endl;			// [화면출력] 2, 1

	save("stl.cpp");
}


template<typename T>
void change(T& a, T& b) {
	T temp { a };
	a = b;
	b = temp;
}


===============================================================================
stl.cpp, 저장시간: 2024-03-05 화요일 오후 4:22:13 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 1학기 STL 월910화78     3월 5일 화요일                                (1주2)
// 
// -------------------------------------------------------------------------------

#include <iostream>

#include "save.h"

using namespace std;


// [문제] main을 수정하지 않고 의도대로 실행되게 change함수를 선언하고 정의하라

class Dog;		// forward declaration 전방선언

class Dog {
	int data;

public:
	Dog(int data) : data { data } {

	}

	operator int() {				// 형변환
		return data;
	}

	friend ostream& operator<<(ostream& out, const Dog& dog) {
		//return out << "Dog { " << dog.data << " }";
		return out << dog.data;
	}
};



template<typename T>
void change(T&, T&);


int main() {
	Dog a { 1 };
	Dog b { 2 };

	change(a, b);

	cout << a << ", " << b << endl;			// [화면출력] 2, 1

	save("stl.cpp");
}


template<typename T>
void change(T& a, T& b) {
	T temp { a };
	a = b;
	b = temp;
}


===============================================================================
stl.cpp, 저장시간: 2024-03-05 화요일 오후 5:04:49 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 1학기 STL 월910화78     3월 5일 화요일                                (1주2)
// 
// 인터넷에서 C++언어 관련 설명을 찾아본다
// -------------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <format>

#include "save.h"

using namespace std;


default_random_engine dre;		// 크기가 커서 전역변수로 한다
uniform_int_distribution uid { 1000, 9999 };


int main() {
	int a[1000];

	for(int& num : a) {
		num = uid(dre);
	}

	for(int num : a) {
		cout << format("{:8}", num);
	}

	save("stl.cpp");
}


===============================================================================
stl.cpp, 저장시간: 2024-03-05 화요일 오후 5:07:47 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 1학기 STL 월910화78     3월 5일 화요일                                (1주2)
// 
// 인터넷에서 C++언어 관련 설명을 찾아본다
// -------------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <format>

#include "save.h"

using namespace std;


default_random_engine dre;		// 크기가 커서 전역변수로 한다
uniform_int_distribution uid { 1000, 9999 };


// [문제] 가장 큰 수를 찾아 화면에 출력한다.


int main() {
	int a[1000];
	int max = 0;

	for(int& num : a) {
		num = uid(dre);
		cout << format("{:8}", num);
		if(max < num) {
			max = num;
		}
	}

	cout << max << endl;

	save("stl.cpp");
}


===============================================================================
stl.cpp, 저장시간: 2024-03-05 화요일 오후 5:08:35 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 1학기 STL 월910화78     3월 5일 화요일                                (1주2)
// 
// 인터넷에서 C++언어 관련 설명을 찾아본다
// -------------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <format>

#include "save.h"

using namespace std;


default_random_engine dre;		// 크기가 커서 전역변수로 한다
uniform_int_distribution uid { 1000, 9999 };


// [문제] 가장 큰 수를 찾아 화면에 출력한다.


int main() {
	int a[1000];
	int max = 0;

	for(int& num : a) {
		num = uid(dre);
		cout << format("{:8}", num);
		if(max < num) {
			max = num;
		}
	}

	cout << max << endl;

	cout << std::max_element(a, a+1000) << endl;

	save("stl.cpp");
}


===============================================================================
stl.cpp, 저장시간: 2024-03-05 화요일 오후 5:08:47 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 1학기 STL 월910화78     3월 5일 화요일                                (1주2)
// 
// 인터넷에서 C++언어 관련 설명을 찾아본다
// -------------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <format>

#include "save.h"

using namespace std;


default_random_engine dre;		// 크기가 커서 전역변수로 한다
uniform_int_distribution uid { 1000, 9999 };


// [문제] 가장 큰 수를 찾아 화면에 출력한다.


int main() {
	int a[1000];
	int max = 0;

	for(int& num : a) {
		num = uid(dre);
		cout << format("{:8}", num);
		if(max < num) {
			max = num;
		}
	}

	cout << max << endl;

	cout << *std::max_element(a, a+1000) << endl;

	save("stl.cpp");
}


===============================================================================
stl.cpp, 저장시간: 2024-03-05 화요일 오후 5:09:40 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 1학기 STL 월910화78     3월 5일 화요일                                (1주2)
// 
// 인터넷에서 C++언어 관련 설명을 찾아본다
// -------------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <format>

#include "save.h"

using namespace std;


default_random_engine dre;		// 크기가 커서 전역변수로 한다
uniform_int_distribution uid { 1000, 9999 };


// [문제] 가장 큰 수를 찾아 화면에 출력한다.


int main() {
	int a[1000];
	int max = 0;

	for(int& num : a) {
		num = uid(dre);
		cout << format("{:8}", num);
		if(max < num) {
			max = num;
		}
	}

	cout << max << endl;

	cout << *std::max_element(a, a+1000) << endl;
	cout << *std::max_element(begin(a), end(a)) << endl;

	save("stl.cpp");
}


===============================================================================
stl.cpp, 저장시간: 2024-03-05 화요일 오후 5:15:28 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 1학기 STL 월910화78     3월 5일 화요일                                (1주2)
// 
// 인터넷에서 C++언어 관련 설명을 찾아본다
// -------------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <format>

#include "save.h"

using namespace std;


//random_device rd;
default_random_engine dre;		// 크기가 커서 전역변수로 한다
uniform_int_distribution uid { 1000, 9999 };


// [문제] 가장 큰 수를 찾아 화면에 출력한다.


int main() {
	int a[1000];

	for(int& num : a) {
		num = uid(dre);
		cout << format("{:8}", num);
	}



	int max = a[0];

	for(int num : a) {
		if(max < num) {
			max = num;
		}
	}

	cout << max << endl;

	cout << *std::max_element(a, a+1000) << endl;
	cout << *std::max_element(begin(a), end(a)) << endl;

	save("stl.cpp");
}


===============================================================================
stl.cpp, 저장시간: 2024-03-05 화요일 오후 5:16:53 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 1학기 STL 월910화78     3월 5일 화요일                                (1주2)
// 
// 인터넷에서 C++언어 관련 설명을 찾아본다
// -------------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <format>

#include "save.h"

using namespace std;


//random_device rd;
default_random_engine dre;		// 크기가 커서 전역변수로 한다
uniform_int_distribution uid { 1000, 9999 };


// [문제] 가장 큰 수를 찾아 화면에 출력한다.


int main() {
	int a[1000];

	for(int& num : a) {
		num = uid(dre);
		cout << format("{:8}", num);
	}



	int max = numeric_limits<int>::min();

	for(int num : a) {
		if(max < num) {
			max = num;
		}
	}

	cout << "최댓값 - " << max << endl;

	cout << *std::max_element(a, a+1000) << endl;
	cout << *std::max_element(begin(a), end(a)) << endl;

	save("stl.cpp");
}



===============================================================================
stl.cpp, 저장시간: 2024-03-11 월요일 오후 5:33:43 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 1학기 STL 월910화78     3월 11일 월요일                              (2주1)
// 
// -------------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <format>

#include "save.h"

using namespace std;


//random_device rd;
default_random_engine dre;		// 크기가 커서 전역변수로 한다
uniform_int_distribution uid { 1000, 9999 };


// [문제] 가장 큰 수를 찾아 화면에 출력한다.


int main() {
	int a[100];

	for(int& num : a) {
		num = uid(dre);
		cout << format("{:8}", num);
	}



	int max = numeric_limits<int>::min();

	for(int num : a) {
		if(max < num) {
			max = num;
		}
	}

	cout << "최댓값 - " << max << endl;

	cout << *std::max_element(a, a+100) << endl;
	cout << *std::max_element(begin(a), end(a)) << endl;

	save("stl.cpp");
}



===============================================================================
stl.cpp, 저장시간: 2024-03-11 월요일 오후 5:35:26 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 1학기 STL 월910화78     3월 11일 월요일                              (2주1)
// 
// -------------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <format>

#include "save.h"

using namespace std;


//random_device rd;
default_random_engine dre;		// 크기가 커서 전역변수로 한다
uniform_int_distribution uid { 1000, 9999 };


// [문제] 가장 큰 수를 찾아 화면에 출력한다.


int main() {
	int a[100];

	for(int& num : a) {
		num = uid(dre);
		cout << format("{:8}", num);
	}



	int max = numeric_limits<int>::min();

	for(int num : a) {
		if(max < num) {
			max = num;
		}
	}

	cout << "최댓값 - " << max << endl;

	cout << *std::max_element(a, a+100) << endl;
	cout << *std::max_element(begin(a), end(a)) << endl;

	save("stl.cpp");
}



===============================================================================
stl.cpp, 저장시간: 2024-03-11 월요일 오후 5:37:21 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 1학기 STL 월910화78     3월 11일 월요일                              (2주1)
// 
// -------------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <format>
#include <print>

#include "save.h"

using namespace std;


//random_device rd;
default_random_engine dre;		// 크기가 커서 전역변수로 한다
uniform_int_distribution uid { 1000, 9999 };


// [문제] 가장 큰 수를 찾아 화면에 출력한다.


int main() {
	int a[100];

	for(int& num : a) {
		num = uid(dre);
		cout << format("{:8}", num);
		print("{:8}", num);
	}



	int max = numeric_limits<int>::min();

	for(int num : a) {
		if(max < num) {
			max = num;
		}
	}

	cout << "최댓값 - " << max << endl;

	cout << *std::max_element(a, a+100) << endl;
	cout << *std::max_element(begin(a), end(a)) << endl;

	save("stl.cpp");
}



===============================================================================
stl.cpp, 저장시간: 2024-03-11 월요일 오후 5:37:36 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 1학기 STL 월910화78     3월 11일 월요일                              (2주1)
// 
// -------------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <format>
#include <print>

#include "save.h"

using namespace std;


//random_device rd;
default_random_engine dre;		// 크기가 커서 전역변수로 한다
uniform_int_distribution uid { 1000, 9999 };


// [문제] 가장 큰 수를 찾아 화면에 출력한다.


int main() {
	int a[100];

	for(int& num : a) {
		num = uid(dre);
		//cout << format("{:8}", num);
		print("{:8}", num);
	}



	int max = numeric_limits<int>::min();

	for(int num : a) {
		if(max < num) {
			max = num;
		}
	}

	cout << "최댓값 - " << max << endl;

	cout << *std::max_element(a, a+100) << endl;
	cout << *std::max_element(begin(a), end(a)) << endl;

	save("stl.cpp");
}



===============================================================================
stl.cpp, 저장시간: 2024-03-11 월요일 오후 5:41:39 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 1학기 STL 월910화78     3월 11일 월요일                              (2주1)
// 
// -------------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <format>
#include <print>

#include "save.h"

using namespace std;


//random_device rd;
default_random_engine dre;		// 크기가 커서 전역변수로 한다
uniform_int_distribution uid { 1000, 9999 };


// [문제] 가장 큰 수를 찾아 화면에 출력한다.


int main() {
	int a[1000];

	for(int& num : a) {
		num = uid(dre);
		//cout << format("{:8}", num);
		print("{:8}", num);
	}



	int max = numeric_limits<int>::min();

	for(int num : a) {
		if(max < num) {
			max = num;
		}
	}

	cout << "최댓값 - " << max << endl;

	cout << *std::max_element(a, a+1000) << endl;
	cout << *std::max_element(begin(a), end(a)) << endl;

	save("stl.cpp");
}



===============================================================================
stl.cpp, 저장시간: 2024-03-11 월요일 오후 5:54:29 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 1학기 STL 월910화78     3월 11일 월요일                              (2주1)
// 
// -------------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <format>
#include <print>
#include <algorithm>

#include "save.h"

using namespace std;


//random_device rd;
default_random_engine dre;		// 크기가 커서 전역변수로 한다
uniform_int_distribution uid { 1000, 9999 };


// [문제] 가장 큰 수를 찾아 화면에 출력한다.


int main() {
    int a[1000];

	for(int& num : a) {
		num = uid(dre);
		print("{:8}", num);
	}

	cout << endl;

	print("최댓값 - {}", *max_element(begin(a), end(a)));

	save("stl.cpp");
}



===============================================================================
stl.cpp, 저장시간: 2024-03-11 월요일 오후 5:59:08 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 1학기 STL 월910화78     3월 11일 월요일                              (2주1)
// 
// -------------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <format>
#include <print>
#include <algorithm>

#include "save.h"

using namespace std;


//random_device rd;
default_random_engine dre;		// 크기가 커서 전역변수로 한다
uniform_int_distribution uid { 1000, 9999 };


// [문제] 가장 큰 수를 찾아 화면에 출력한다.


int main() {
    int a[1000];	// contiguous

	for(int& num : a) {
		num = uid(dre);
		print("{:8}", num);
	}

	cout << endl;

	print("최댓값 - {}", *max_element(begin(a), end(a)));

	save("stl.cpp");
}
