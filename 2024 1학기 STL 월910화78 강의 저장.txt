===============================================================================
stl.cpp, 저장시간: 2024-03-04 월요일 오후 7:52:17 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 STL 3.5 월910                                                       (1주1)
// 
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성 / std::c++latest, SDL 검사 - no
// 
// 한학기 강의를 저장하는 save 만들기
// -------------------------------------------------------------------------------

#include <iostream>

#include "save.h"

using namespace std;


int main() {
	cout << "STL 입니다." << '\n';

	save("stl.cpp");
}


===============================================================================
stl.cpp, 저장시간: 2024-03-04 월요일 오후 7:53:21 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 STL 3.5 월910                                                       (1주1)
// 
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성 / std::c++latest, SDL 검사 - no
// 
// 한학기 강의를 저장하는 save 만들기
// -------------------------------------------------------------------------------

#include <iostream>

#include "save.h"

using namespace std;


int main() {
	cout << "STL 입니다." << '\n';

	save("stl.cpp");
}


===============================================================================
stl.cpp, 저장시간: 2024-03-04 월요일 오후 8:00:16 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 STL 3.5 월910                                                       (1주1)
// 
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성 / std::c++latest, SDL 검사 - no
// 
// 한학기 강의를 저장하는 save 만들기
// -------------------------------------------------------------------------------

#include <iostream>

#include "save.h"

using namespace std;


int main() {
	cout << "STL 입니다." << '\n';

	save("stl.cpp");
}


===============================================================================
stl.cpp, 저장시간: 2024-03-05 화요일 오후 3:40:10 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 STL 3.5 월910                                                       (1주1)
// 
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성 / std::c++latest, SDL 검사 - no
// 
// 한학기 강의를 저장하는 save 만들기
// -------------------------------------------------------------------------------

#include <iostream>

#include "save.h"

using namespace std;


int main() {
	cout << "STL 입니다." << '\n';

	save("stl.cpp");
}


===============================================================================
stl.cpp, 저장시간: 2024-03-05 화요일 오후 3:40:43 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 STL 3.5 월910                                                       (1주1)
// 
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성 / std::c++latest, SDL 검사 - no
// 
// 한학기 강의를 저장하는 save 만들기
// -------------------------------------------------------------------------------

#include <iostream>

#include "save.h"

using namespace std;


int main() {
	cout << "save를 만들었습니다." << '\n';

	save("stl.cpp");
}


===============================================================================
save.h, 저장시간: 2024-03-05 화요일 오후 3:42:41 
===============================================================================
#pragma once

#include <string_view>


void save(std::string_view);


===============================================================================
save.cpp, 저장시간: 2024-03-05 화요일 오후 3:42:41 
===============================================================================
#include "save.h"

#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <chrono>

using namespace std;


void save(string_view fileName) {
	// fileName을 읽을 파일로 연다
	ifstream in { fileName.data() };
	//cout << sizeof in << endl;
	//cout << addressof(in) << endl;
	//cout << typeid(in).name() << endl;
	if(not in) {
		cout << fileName << " - 파일 열기 실패" << endl;
		exit(0);
	}

	// 저장할 파일을 덧붙여 쓰기 모드로 연다
	ofstream out { "2024 1학기 STL 월910화78 강의 저장.txt", ios::app };

	// 저장한 시간을 기록한다
	out << endl << endl << endl;
	auto now = chrono::system_clock::now();			// epoch
	auto time = chrono::system_clock::to_time_t(now);			// UTC 시간으로 변환
	auto lt = localtime(&time);	// 현지시간으로 변환

	auto old = out.imbue(locale("ko_KR"));
	// 날짜를 내 마음대로 출력한다
	out << "===============================================================================" << endl;
	out << fileName << put_time(lt, ", 저장시간: %x %A %X ") << endl;
	out << "===============================================================================" << endl;
	out.imbue(old);

	// 읽을 파일의 내용을 모두 읽어 쓸 파일에 덧붙여 쓴다
	// STL 자료구조와 알고리즘을 이용해 본다.
	// (좋은 코드는 아닌데, 예시로 이렇게도 가능하다는걸 보여주기 위함)
	vector<char> v { istreambuf_iterator { in }, {} };
	copy(v.begin(), v.end(), ostreambuf_iterator<char> { out });
}


===============================================================================
stl.cpp, 저장시간: 2024-03-05 화요일 오후 3:42:41 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 STL 3.5 월910                                                       (1주1)
// 
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성 / std::c++latest, SDL 검사 - no
// 
// 한학기 강의를 저장하는 save 만들기
// -------------------------------------------------------------------------------

#include <iostream>

#include "save.h"

using namespace std;


int main() {
	cout << "save를 만들었습니다." << '\n';

	save("save.h");
	save("save.cpp");
	save("stl.cpp");
}


===============================================================================
stl.cpp, 저장시간: 2024-03-05 화요일 오후 3:49:31 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 1학기 STL 월910화78     3월 5일 화요일                                (1주2)
// 
// -------------------------------------------------------------------------------

#include <iostream>

#include "save.h"

using namespace std;


// [문제] main을 수정하지 않고 의도대로 실행되게 change함수를 선언하고 정의하라

void change(int& a, int& b);


int main() {
	int a { 1 };
	int b { 2 };

	change(a, b);

	cout << a << ", " << b << endl;			// [화면출력] 2, 1

	save("stl.cpp");
}


void change(int& a, int& b) {
	int temp = a;
	a = b;
	b = temp;
}


===============================================================================
stl.cpp, 저장시간: 2024-03-05 화요일 오후 3:56:51 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 1학기 STL 월910화78     3월 5일 화요일                                (1주2)
// 
// -------------------------------------------------------------------------------

#include <iostream>

#include "save.h"

using namespace std;


// [문제] main을 수정하지 않고 의도대로 실행되게 change함수를 선언하고 정의하라

void change(int&, int&);


int main() {
	int a { 1 };
	int b { 2 };

	change(a, b);

	cout << a << ", " << b << endl;			// [화면출력] 2, 1

	save("stl.cpp");
}


void change(int& a, int& b) {
	int temp { a };
	a = b;
	b = temp;
}


===============================================================================
stl.cpp, 저장시간: 2024-03-05 화요일 오후 4:01:58 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 1학기 STL 월910화78     3월 5일 화요일                                (1주2)
// 
// -------------------------------------------------------------------------------

#include <iostream>

#include "save.h"

using namespace std;


// [문제] main을 수정하지 않고 의도대로 실행되게 change함수를 선언하고 정의하라

class Dog {
public:
	int data;
};

ostream& operator<<(ostream& out, const Dog& dog) {
	return out << dog.data;
}


template<typename T>
void change(T&, T&);


int main() {
	Dog a { 1 };
	Dog b { 2 };

	change(a, b);

	cout << a << ", " << b << endl;			// [화면출력] 2, 1

	save("stl.cpp");
}


template<typename T>
void change(T& a, T& b) {
	T temp { a };
	a = b;
	b = temp;
}


===============================================================================
stl.cpp, 저장시간: 2024-03-05 화요일 오후 4:02:28 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 1학기 STL 월910화78     3월 5일 화요일                                (1주2)
// 
// -------------------------------------------------------------------------------

#include <iostream>

#include "save.h"

using namespace std;


// [문제] main을 수정하지 않고 의도대로 실행되게 change함수를 선언하고 정의하라

class Dog {
public:
	int data;
};

ostream& operator<<(ostream& out, const Dog& dog) {
	return out << "Dog { " << dog.data << " }";
}


template<typename T>
void change(T&, T&);


int main() {
	Dog a { 1 };
	Dog b { 2 };

	change(a, b);

	cout << a << ", " << b << endl;			// [화면출력] 2, 1

	save("stl.cpp");
}


template<typename T>
void change(T& a, T& b) {
	T temp { a };
	a = b;
	b = temp;
}


===============================================================================
stl.cpp, 저장시간: 2024-03-05 화요일 오후 4:17:52 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 1학기 STL 월910화78     3월 5일 화요일                                (1주2)
// 
// -------------------------------------------------------------------------------

#include <iostream>

#include "save.h"

using namespace std;


// [문제] main을 수정하지 않고 의도대로 실행되게 change함수를 선언하고 정의하라

class Dog {
public:
	int data;

public:
	operator int() {				// 형변환
		return data;
	}
};

ostream& operator<<(ostream& out, const Dog& dog) {
	//return out << "Dog { " << dog.data << " }";
	return out << dog.data;
}


template<typename T>
void change(T&, T&);


int main() {
	Dog a { 1 };
	Dog b { 2 };

	change(a, b);

	cout << a << ", " << b << endl;			// [화면출력] 2, 1

	save("stl.cpp");
}


template<typename T>
void change(T& a, T& b) {
	T temp { a };
	a = b;
	b = temp;
}


===============================================================================
stl.cpp, 저장시간: 2024-03-05 화요일 오후 4:22:13 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 1학기 STL 월910화78     3월 5일 화요일                                (1주2)
// 
// -------------------------------------------------------------------------------

#include <iostream>

#include "save.h"

using namespace std;


// [문제] main을 수정하지 않고 의도대로 실행되게 change함수를 선언하고 정의하라

class Dog;		// forward declaration 전방선언

class Dog {
	int data;

public:
	Dog(int data) : data { data } {

	}

	operator int() {				// 형변환
		return data;
	}

	friend ostream& operator<<(ostream& out, const Dog& dog) {
		//return out << "Dog { " << dog.data << " }";
		return out << dog.data;
	}
};



template<typename T>
void change(T&, T&);


int main() {
	Dog a { 1 };
	Dog b { 2 };

	change(a, b);

	cout << a << ", " << b << endl;			// [화면출력] 2, 1

	save("stl.cpp");
}


template<typename T>
void change(T& a, T& b) {
	T temp { a };
	a = b;
	b = temp;
}


===============================================================================
stl.cpp, 저장시간: 2024-03-05 화요일 오후 5:04:49 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 1학기 STL 월910화78     3월 5일 화요일                                (1주2)
// 
// 인터넷에서 C++언어 관련 설명을 찾아본다
// -------------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <format>

#include "save.h"

using namespace std;


default_random_engine dre;		// 크기가 커서 전역변수로 한다
uniform_int_distribution uid { 1000, 9999 };


int main() {
	int a[1000];

	for(int& num : a) {
		num = uid(dre);
	}

	for(int num : a) {
		cout << format("{:8}", num);
	}

	save("stl.cpp");
}


===============================================================================
stl.cpp, 저장시간: 2024-03-05 화요일 오후 5:07:47 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 1학기 STL 월910화78     3월 5일 화요일                                (1주2)
// 
// 인터넷에서 C++언어 관련 설명을 찾아본다
// -------------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <format>

#include "save.h"

using namespace std;


default_random_engine dre;		// 크기가 커서 전역변수로 한다
uniform_int_distribution uid { 1000, 9999 };


// [문제] 가장 큰 수를 찾아 화면에 출력한다.


int main() {
	int a[1000];
	int max = 0;

	for(int& num : a) {
		num = uid(dre);
		cout << format("{:8}", num);
		if(max < num) {
			max = num;
		}
	}

	cout << max << endl;

	save("stl.cpp");
}


===============================================================================
stl.cpp, 저장시간: 2024-03-05 화요일 오후 5:08:35 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 1학기 STL 월910화78     3월 5일 화요일                                (1주2)
// 
// 인터넷에서 C++언어 관련 설명을 찾아본다
// -------------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <format>

#include "save.h"

using namespace std;


default_random_engine dre;		// 크기가 커서 전역변수로 한다
uniform_int_distribution uid { 1000, 9999 };


// [문제] 가장 큰 수를 찾아 화면에 출력한다.


int main() {
	int a[1000];
	int max = 0;

	for(int& num : a) {
		num = uid(dre);
		cout << format("{:8}", num);
		if(max < num) {
			max = num;
		}
	}

	cout << max << endl;

	cout << std::max_element(a, a+1000) << endl;

	save("stl.cpp");
}


===============================================================================
stl.cpp, 저장시간: 2024-03-05 화요일 오후 5:08:47 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 1학기 STL 월910화78     3월 5일 화요일                                (1주2)
// 
// 인터넷에서 C++언어 관련 설명을 찾아본다
// -------------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <format>

#include "save.h"

using namespace std;


default_random_engine dre;		// 크기가 커서 전역변수로 한다
uniform_int_distribution uid { 1000, 9999 };


// [문제] 가장 큰 수를 찾아 화면에 출력한다.


int main() {
	int a[1000];
	int max = 0;

	for(int& num : a) {
		num = uid(dre);
		cout << format("{:8}", num);
		if(max < num) {
			max = num;
		}
	}

	cout << max << endl;

	cout << *std::max_element(a, a+1000) << endl;

	save("stl.cpp");
}


===============================================================================
stl.cpp, 저장시간: 2024-03-05 화요일 오후 5:09:40 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 1학기 STL 월910화78     3월 5일 화요일                                (1주2)
// 
// 인터넷에서 C++언어 관련 설명을 찾아본다
// -------------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <format>

#include "save.h"

using namespace std;


default_random_engine dre;		// 크기가 커서 전역변수로 한다
uniform_int_distribution uid { 1000, 9999 };


// [문제] 가장 큰 수를 찾아 화면에 출력한다.


int main() {
	int a[1000];
	int max = 0;

	for(int& num : a) {
		num = uid(dre);
		cout << format("{:8}", num);
		if(max < num) {
			max = num;
		}
	}

	cout << max << endl;

	cout << *std::max_element(a, a+1000) << endl;
	cout << *std::max_element(begin(a), end(a)) << endl;

	save("stl.cpp");
}


===============================================================================
stl.cpp, 저장시간: 2024-03-05 화요일 오후 5:15:28 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 1학기 STL 월910화78     3월 5일 화요일                                (1주2)
// 
// 인터넷에서 C++언어 관련 설명을 찾아본다
// -------------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <format>

#include "save.h"

using namespace std;


//random_device rd;
default_random_engine dre;		// 크기가 커서 전역변수로 한다
uniform_int_distribution uid { 1000, 9999 };


// [문제] 가장 큰 수를 찾아 화면에 출력한다.


int main() {
	int a[1000];

	for(int& num : a) {
		num = uid(dre);
		cout << format("{:8}", num);
	}



	int max = a[0];

	for(int num : a) {
		if(max < num) {
			max = num;
		}
	}

	cout << max << endl;

	cout << *std::max_element(a, a+1000) << endl;
	cout << *std::max_element(begin(a), end(a)) << endl;

	save("stl.cpp");
}


===============================================================================
stl.cpp, 저장시간: 2024-03-05 화요일 오후 5:16:53 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 1학기 STL 월910화78     3월 5일 화요일                                (1주2)
// 
// 인터넷에서 C++언어 관련 설명을 찾아본다
// -------------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <format>

#include "save.h"

using namespace std;


//random_device rd;
default_random_engine dre;		// 크기가 커서 전역변수로 한다
uniform_int_distribution uid { 1000, 9999 };


// [문제] 가장 큰 수를 찾아 화면에 출력한다.


int main() {
	int a[1000];

	for(int& num : a) {
		num = uid(dre);
		cout << format("{:8}", num);
	}



	int max = numeric_limits<int>::min();

	for(int num : a) {
		if(max < num) {
			max = num;
		}
	}

	cout << "최댓값 - " << max << endl;

	cout << *std::max_element(a, a+1000) << endl;
	cout << *std::max_element(begin(a), end(a)) << endl;

	save("stl.cpp");
}



===============================================================================
stl.cpp, 저장시간: 2024-03-11 월요일 오후 5:33:43 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 1학기 STL 월910화78     3월 11일 월요일                              (2주1)
// 
// -------------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <format>

#include "save.h"

using namespace std;


//random_device rd;
default_random_engine dre;		// 크기가 커서 전역변수로 한다
uniform_int_distribution uid { 1000, 9999 };


// [문제] 가장 큰 수를 찾아 화면에 출력한다.


int main() {
	int a[100];

	for(int& num : a) {
		num = uid(dre);
		cout << format("{:8}", num);
	}



	int max = numeric_limits<int>::min();

	for(int num : a) {
		if(max < num) {
			max = num;
		}
	}

	cout << "최댓값 - " << max << endl;

	cout << *std::max_element(a, a+100) << endl;
	cout << *std::max_element(begin(a), end(a)) << endl;

	save("stl.cpp");
}



===============================================================================
stl.cpp, 저장시간: 2024-03-11 월요일 오후 5:35:26 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 1학기 STL 월910화78     3월 11일 월요일                              (2주1)
// 
// -------------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <format>

#include "save.h"

using namespace std;


//random_device rd;
default_random_engine dre;		// 크기가 커서 전역변수로 한다
uniform_int_distribution uid { 1000, 9999 };


// [문제] 가장 큰 수를 찾아 화면에 출력한다.


int main() {
	int a[100];

	for(int& num : a) {
		num = uid(dre);
		cout << format("{:8}", num);
	}



	int max = numeric_limits<int>::min();

	for(int num : a) {
		if(max < num) {
			max = num;
		}
	}

	cout << "최댓값 - " << max << endl;

	cout << *std::max_element(a, a+100) << endl;
	cout << *std::max_element(begin(a), end(a)) << endl;

	save("stl.cpp");
}



===============================================================================
stl.cpp, 저장시간: 2024-03-11 월요일 오후 5:37:21 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 1학기 STL 월910화78     3월 11일 월요일                              (2주1)
// 
// -------------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <format>
#include <print>

#include "save.h"

using namespace std;


//random_device rd;
default_random_engine dre;		// 크기가 커서 전역변수로 한다
uniform_int_distribution uid { 1000, 9999 };


// [문제] 가장 큰 수를 찾아 화면에 출력한다.


int main() {
	int a[100];

	for(int& num : a) {
		num = uid(dre);
		cout << format("{:8}", num);
		print("{:8}", num);
	}



	int max = numeric_limits<int>::min();

	for(int num : a) {
		if(max < num) {
			max = num;
		}
	}

	cout << "최댓값 - " << max << endl;

	cout << *std::max_element(a, a+100) << endl;
	cout << *std::max_element(begin(a), end(a)) << endl;

	save("stl.cpp");
}



===============================================================================
stl.cpp, 저장시간: 2024-03-11 월요일 오후 5:37:36 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 1학기 STL 월910화78     3월 11일 월요일                              (2주1)
// 
// -------------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <format>
#include <print>

#include "save.h"

using namespace std;


//random_device rd;
default_random_engine dre;		// 크기가 커서 전역변수로 한다
uniform_int_distribution uid { 1000, 9999 };


// [문제] 가장 큰 수를 찾아 화면에 출력한다.


int main() {
	int a[100];

	for(int& num : a) {
		num = uid(dre);
		//cout << format("{:8}", num);
		print("{:8}", num);
	}



	int max = numeric_limits<int>::min();

	for(int num : a) {
		if(max < num) {
			max = num;
		}
	}

	cout << "최댓값 - " << max << endl;

	cout << *std::max_element(a, a+100) << endl;
	cout << *std::max_element(begin(a), end(a)) << endl;

	save("stl.cpp");
}



===============================================================================
stl.cpp, 저장시간: 2024-03-11 월요일 오후 5:41:39 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 1학기 STL 월910화78     3월 11일 월요일                              (2주1)
// 
// -------------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <format>
#include <print>

#include "save.h"

using namespace std;


//random_device rd;
default_random_engine dre;		// 크기가 커서 전역변수로 한다
uniform_int_distribution uid { 1000, 9999 };


// [문제] 가장 큰 수를 찾아 화면에 출력한다.


int main() {
	int a[1000];

	for(int& num : a) {
		num = uid(dre);
		//cout << format("{:8}", num);
		print("{:8}", num);
	}



	int max = numeric_limits<int>::min();

	for(int num : a) {
		if(max < num) {
			max = num;
		}
	}

	cout << "최댓값 - " << max << endl;

	cout << *std::max_element(a, a+1000) << endl;
	cout << *std::max_element(begin(a), end(a)) << endl;

	save("stl.cpp");
}



===============================================================================
stl.cpp, 저장시간: 2024-03-11 월요일 오후 5:54:29 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 1학기 STL 월910화78     3월 11일 월요일                              (2주1)
// 
// -------------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <format>
#include <print>
#include <algorithm>

#include "save.h"

using namespace std;


//random_device rd;
default_random_engine dre;		// 크기가 커서 전역변수로 한다
uniform_int_distribution uid { 1000, 9999 };


// [문제] 가장 큰 수를 찾아 화면에 출력한다.


int main() {
    int a[1000];

	for(int& num : a) {
		num = uid(dre);
		print("{:8}", num);
	}

	cout << endl;

	print("최댓값 - {}", *max_element(begin(a), end(a)));

	save("stl.cpp");
}



===============================================================================
stl.cpp, 저장시간: 2024-03-11 월요일 오후 5:59:08 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 1학기 STL 월910화78     3월 11일 월요일                              (2주1)
// 
// -------------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <format>
#include <print>
#include <algorithm>

#include "save.h"

using namespace std;


//random_device rd;
default_random_engine dre;		// 크기가 커서 전역변수로 한다
uniform_int_distribution uid { 1000, 9999 };


// [문제] 가장 큰 수를 찾아 화면에 출력한다.


int main() {
    int a[1000];	// contiguous

	for(int& num : a) {
		num = uid(dre);
		print("{:8}", num);
	}

	cout << endl;

	print("최댓값 - {}", *max_element(begin(a), end(a)));

	save("stl.cpp");
}



===============================================================================
stl.cpp, 저장시간: 2024-03-11 월요일 오후 6:04:37 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 1학기 STL 월910화78     3월 11일 월요일                              (2주1)
// 
// -------------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <format>
#include <print>
#include <algorithm>
#include <array>

#include "save.h"

using namespace std;


//random_device rd;
default_random_engine dre;		// 크기가 커서 전역변수로 한다
uniform_int_distribution uid { 1000, 9999 };


// [문제] 가장 큰 수를 찾아 화면에 출력한다.


int main() {
	array<int, 100> a;	// 배열 대신 이걸 사용한다.	

	for(int& num : a) {
		num = uid(dre);
		print("{:8}", num);
	}

	cout << endl;

	print("최댓값 - {}", *max_element(begin(a), end(a)));

	save("stl.cpp");
}



===============================================================================
stl.cpp, 저장시간: 2024-03-11 월요일 오후 6:08:33 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 1학기 STL 월910화78     3월 11일 월요일                              (2주1)
// 
// -------------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <format>
#include <print>
#include <algorithm>
#include <array>

#include "save.h"

using namespace std;


//random_device rd;
default_random_engine dre;		// 크기가 커서 전역변수로 한다
uniform_int_distribution uid { 1000, 9999 };


// [문제] 가장 큰 수를 찾아 화면에 출력한다.


int main() {
	array<int, 100> a;	// 배열 대신 이걸 사용한다.	
	
	println("배열과 같은 크기의 메모리만 사용한다! sizeof(arary<int, 100) = {}", sizeof(a));

	for(int& num : a) {
		num = uid(dre);
		print("{:8}", num);
	}

	cout << endl;

	print("최댓값 - {}", *max_element(begin(a), end(a)));

	save("stl.cpp");
}



===============================================================================
stl.cpp, 저장시간: 2024-03-11 월요일 오후 6:16:49 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 1학기 STL 월910화78     3월 11일 월요일                              (2주1)
// 
// -------------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <random>
#include <format>
#include <print>
#include <algorithm>
#include <array>

#include "save.h"

using namespace std;


//random_device rd;
default_random_engine dre;		// 크기가 커서 전역변수로 한다
uniform_int_distribution uid { 1000, 9999 };


// [문제] 가장 큰 수를 찾아 화면에 출력한다.


int main() {
	array<int, 100> a;
	
	for(int& num : a) {
		num = uid(dre);
	}

	// [문제] a에 있는 int값을 파일 "int값들.txt"에 기록하라
	ofstream out { "int값들.txt" };
	for(int num : a) {
		out << num << endl;
	}

	save("stl.cpp");
}



===============================================================================
stl.cpp, 저장시간: 2024-03-11 월요일 오후 6:25:41 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 1학기 STL 월910화78     3월 11일 월요일                              (2주1)
// 
// -------------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <random>
#include <format>
#include <print>
#include <algorithm>
#include <array>

#include "save.h"

using namespace std;


//random_device rd;
default_random_engine dre;		// 크기가 커서 전역변수로 한다
uniform_int_distribution uid { 10000, 99999 };


// [문제] 가장 큰 수를 찾아 화면에 출력한다.


int main() {
	array<int, 100> a;
	
	for(int& num : a) {
		num = uid(dre);
	}

	// [문제] a에 있는 int값을 파일 "int값들.txt"에 기록하라
	ofstream out { "int값들.txt" };	// RAII
	for(int num : a) {
		print(out, "{:8}", num);
	}

	save("stl.cpp");
}



===============================================================================
stl.cpp, 저장시간: 2024-03-11 월요일 오후 6:26:38 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 1학기 STL 월910화78     3월 11일 월요일                              (2주1)
// 
// -------------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <random>
#include <format>
#include <print>
#include <algorithm>
#include <array>

#include "save.h"

using namespace std;


//random_device rd;
default_random_engine dre;		// 크기가 커서 전역변수로 한다
uniform_int_distribution uid { 0, 99'999 };


// [문제] 가장 큰 수를 찾아 화면에 출력한다.


int main() {
	array<int, 100> a;
	
	for(int& num : a) {
		num = uid(dre);
	}

	// [문제] a에 있는 int값을 파일 "int값들.txt"에 기록하라
	ofstream out { "int값들.txt" };	// RAII
	for(int num : a) {
		print(out, "{:8}", num);
	}

	save("stl.cpp");
}



===============================================================================
stl.cpp, 저장시간: 2024-03-11 월요일 오후 6:34:08 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 1학기 STL 월910화78     3월 11일 월요일                              (2주1)
// 
// -------------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <random>
#include <format>
#include <algorithm>
#include <print>
#include <array>
#include <list>

#include "save.h"

using namespace std;


//random_device rd;
default_random_engine dre;		// 크기가 커서 전역변수로 한다
uniform_int_distribution uid { 0, 99'999 };


// [문제] 파일 "int값들.txt"에는 몇 개인지 모르는 int가 저장되어있다. 
// 모두 몇 개인지 출력하고 그 중에 가장 큰 값도 화면에 출력하라.


int main() {
	list<int> numbers;

	ifstream in { "int값들.txt" };

	while(!in.eof()) {
		int num;
		in >> num;
		numbers.push_back(num);
		println("{}", num);
	}

	println("\nsize: {}", numbers.size());
	println("max: {}", *max_element(numbers.begin(), numbers.end()));

	save("stl.cpp");
}



===============================================================================
stl.cpp, 저장시간: 2024-03-11 월요일 오후 6:41:54 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 1학기 STL 월910화78     3월 11일 월요일                              (2주1)
// 
// -------------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <random>
#include <format>
#include <algorithm>
#include <print>
#include <array>
#include <list>

#include "save.h"

using namespace std;


//random_device rd;
default_random_engine dre;		// 크기가 커서 전역변수로 한다
uniform_int_distribution uid { 0, 99'999 };


// [문제] 파일 "int값들.txt"에는 몇 개인지 모르는 int가 저장되어있다. 
// 모두 몇 개인지 출력하고 그 중에 가장 큰 값도 화면에 출력하라.


int main() {
	ifstream in { "int값들.txt" };
	if(not in) {
		exit(0);
	}

	int num;
	int cnt {};
	int max_value = numeric_limits<int>::min();
	while(in >> num) {
		++cnt;
		if(max_value < num) {
			max_value = num;
		}
	}

	println("cnt: {}", cnt);
	println("max: {}", max_value);

	save("stl.cpp");
}



===============================================================================
stl.cpp, 저장시간: 2024-03-11 월요일 오후 6:49:10 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 1학기 STL 월910화78     3월 11일 월요일                              (2주1)
// 
// -------------------------------------------------------------------------------

#include <fstream>
#include <algorithm>
#include <print>

#include "save.h"

using namespace std;


// [문제] 파일 "int값들.txt"에는 몇 개인지 모르는 int가 저장되어있다. 
// 모두 몇 개인지 출력하고 그 중에 가장 큰 값도 화면에 출력하라.


int main() {
	ifstream in { "int값들.txt" };
	if(not in) {
		exit(0);
	}

	println("max: {}", *max_element(istream_iterator<int> { in }, {}));

	save("stl.cpp");
}



===============================================================================
stl.cpp, 저장시간: 2024-03-11 월요일 오후 6:49:41 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 1학기 STL 월910화78     3월 11일 월요일                              (2주1)
// 
// -------------------------------------------------------------------------------

#include <fstream>
#include <algorithm>
#include <print>

#include "save.h"

using namespace std;


// [문제] 파일 "int값들.txt"에는 몇 개인지 모르는 int가 저장되어있다. 
// 모두 몇 개인지 출력하고 그 중에 가장 큰 값도 화면에 출력하라.


int main() {
	ifstream in { "int값들.txt" };
	if(not in) {
		exit(0);
	}

	println("max: {}", *max_element(istream_iterator<int> { in }, {}));
	// {}는 끝을 나타낸다.

	save("stl.cpp");
}



===============================================================================
stl.cpp, 저장시간: 2024-03-11 월요일 오후 6:57:38 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 1학기 STL 월910화78     3월 11일 월요일                              (2주1)
// 
// -------------------------------------------------------------------------------

#include <print>

#include "save.h"

using namespace std;


template<typename T, size_t size>
class Array {
	T arr[size];

public:
	T& operator[](size_t index) {
		return arr[index];
	}
};

int main() {
	Array<int, 100> arr;

	println("Array<int, 100> size: {}", sizeof(arr));
	println("arr[10]: {}", arr[0]);

	save("stl.cpp");
}





===============================================================================
stl.cpp, 저장시간: 2024-03-12 화요일 오후 3:34:28 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 1학기 STL 월910화78     3월 11일 월요일                              (2주2)
// 
// -------------------------------------------------------------------------------

#include <print>
#include <array>
#include "save.h"

using namespace std;

// [문제] int 100개를 저장하는데 메모리 bit값을 그대로 저장하자.
// int 100개 = sizeof(int) * 100 = 400 bytes

int main() {
	array<int, 100> a { };

	for(int num: a) {
		println("{}", num);
	}

	save("stl.cpp");
}





===============================================================================
stl.cpp, 저장시간: 2024-03-12 화요일 오후 3:48:42 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 1학기 STL 월910화78     3월 11일 월요일                              (2주2)
// 
// -------------------------------------------------------------------------------

#include <print>
#include <array>
#include <numeric>
#include "save.h"

using namespace std;

// [문제] int 100개를 저장하는데 메모리 bit값을 그대로 저장하자.
// int 100개 = sizeof(int) * 100 = 400 bytes

int main() {
	array<int, 100> a;

	iota(a.begin(), a.end(), 1);

	for(int num: a) {
		print("{:8}", num);
	}

	save("stl.cpp");
}



===============================================================================
stl.cpp, 저장시간: 2024-03-12 화요일 오후 3:58:37 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 1학기 STL 월910화78     3월 11일 월요일                              (2주2)
// 
// -------------------------------------------------------------------------------

#include <print>
#include <array>
#include <numeric>
#include <fstream>
#include "save.h"

using namespace std;

// [문제] int 100개를 저장하는데 메모리 bit값을 그대로 저장하자.
// int 100개 = sizeof(int) * 100 = 400 bytes

int main() {
	array<int, 100> a;

	iota(a.begin(), a.end(), 1);

	// 파일 "int100개를메모리그대로저장.txt"

	save("stl.cpp");
}
	


===============================================================================
stl.cpp, 저장시간: 2024-03-12 화요일 오후 4:07:20 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 1학기 STL 월910화78     3월 11일 월요일                              (2주2)
// 
// -------------------------------------------------------------------------------

#include <print>
#include <array>
#include <numeric>
#include <fstream>
#include "save.h"

using namespace std;

// [문제] int 100개를 저장하는데 메모리 bit값을 그대로 저장하자.
// int 100개 = sizeof(int) * 100 = 400 bytes

int main() {
	array<int, 100> a;

	iota(a.begin(), a.end(), 1);

	// 파일 "int100개를메모리그대로저장.txt"
	ofstream out { "int100개를메모리그대로저장.txt" };
	
	// 저수준(low-level) I/O 사용
	out.write(
		(const char*)a.data(),		// data(): 시작번지 반환
		a.size()*sizeof(int)
	);

	save("stl.cpp");
}
	


===============================================================================
stl.cpp, 저장시간: 2024-03-12 화요일 오후 4:12:19 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 1학기 STL 월910화78     3월 11일 월요일                              (2주2)
// 
// -------------------------------------------------------------------------------

#include <print>
#include <array>
#include <numeric>
#include <fstream>
#include "save.h"

using namespace std;

// [문제] int 100개를 저장하는데 메모리 bit값을 그대로 저장하자.
// int 100개 = sizeof(int) * 100 = 400 bytes

int main() {
	array<int, 100> a;

	iota(a.begin(), a.end(), 1);

	// 파일 "int100개를메모리그대로저장.txt"
	ofstream out { "int100개를메모리그대로저장.txt" };
	
	// 저수준(low-level) I/O 사용
	out.write(
		(const char*)a.data(),		// data(): 시작번지 반환
		400
	);

	// 401바이트가 나온다.

	save("stl.cpp");
}
	


===============================================================================
stl.cpp, 저장시간: 2024-03-12 화요일 오후 4:17:16 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 1학기 STL 월910화78     3월 11일 월요일                              (2주2)
// 
// -------------------------------------------------------------------------------

#include <print>
#include <array>
#include <numeric>
#include <fstream>
#include "save.h"

using namespace std;

// [문제] int 100개를 저장하는데 메모리 bit값을 그대로 저장하자.
// int 100개 = sizeof(int) * 100 = 400 bytes

int main() {
	array<int, 100> a;

	iota(a.begin(), a.end(), 1);

	// 파일 "int100개를메모리그대로저장.txt"
	ofstream out { "int100개를메모리그대로저장.txt", ios::binary };
	
	// 저수준(low-level) I/O 사용
	out.write(
		(const char*)a.data(),		// data(): 시작번지 반환
		400
	);

	// 401바이트가 나온다.
	// os마다 늘어나는 정도가 다르다
	// 어디선가 1바이트 짜리를 2바이트로 기록한다.
	// .txt이기 때문이다. \n가 \n\r로 변환돼서 저장된다.

	save("stl.cpp");
}
	


===============================================================================
stl.cpp, 저장시간: 2024-03-12 화요일 오후 4:19:04 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 1학기 STL 월910화78     3월 11일 월요일                              (2주2)
// 
// -------------------------------------------------------------------------------

#include <print>
#include <array>
#include <numeric>
#include <fstream>
#include "save.h"

using namespace std;

// [문제] int 100개를 저장하는데 메모리 bit값을 그대로 저장하자.
// int 100개 = sizeof(int) * 100 = 400 bytes

int main() {
	array<int, 100> a;

	iota(a.begin(), a.end(), 1);

	// 파일 "int100개를메모리그대로저장.txt"
	ofstream out { "int100개를메모리그대로저장.txt", ios::binary };
	
	// 저수준(low-level) I/O 사용
	out.write(
		(const char*)a.data(),		// data(): 시작번지 반환
		a.size() * sizeof(int)
	);

	// 401바이트가 나온다.
	// os마다 늘어나는 정도가 다르다
	// 어디선가 1바이트 짜리를 2바이트로 기록한다.
	// .txt이기 때문이다. \n가 \n\r로 변환돼서 저장된다.
	// ios::binary로 이걸 방지한다.

	save("stl.cpp");
}
	


===============================================================================
stl.cpp, 저장시간: 2024-03-12 화요일 오후 4:37:48 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 1학기 STL 월910화78     3월 11일 월요일                              (2주2)
// 
// -------------------------------------------------------------------------------

#include <print>
#include <fstream>

#include "save.h"

using namespace std;

// [문제] 파일 "int100개를메모리그대로저장.txt"에
// int값 100개가 write함수를 사용하여 기록되어 있다.
// 파일은 binary모드로 열어 기록하였다.
// 파일에 기록된 int값 100개를 메모리로 읽어온 후
// 화면에 그 값을 출력하라. 

int main() {
	ifstream in { "int100개를메모리그대로저장.txt", ios::binary };

	int buf[100];
	in.read((char*)buf, sizeof(buf));

	for(int num : buf) {
		print("{:8}", num);
	}

	save("stl.cpp");
}
	


===============================================================================
stl.cpp, 저장시간: 2024-03-12 화요일 오후 4:43:52 
===============================================================================
// -------------------------------------------------------------------------------
// 2024 1학기 STL 월910화78     3월 11일 월요일                              (2주2)
// 
// -------------------------------------------------------------------------------

#include <print>
#include <fstream>
#include <array>

#include "save.h"

using namespace std;

// [문제] 파일 "int100개를메모리그대로저장.txt"에
// int값 100개가 write함수를 사용하여 기록되어 있다.
// 파일은 binary모드로 열어 기록하였다.
// 파일에 기록된 int값 100개를 메모리로 읽어온 후
// 화면에 그 값을 출력하라. 

int main() {
	ifstream in { "int100개를메모리그대로저장.txt", ios::binary };
	if(not in) {
		print("파일 열기 실패");
		exit(0);
	}

	array<int, 100> buf;
	in.read((char*)buf.data(), sizeof(buf));

	for(int num : buf) {
		print("{:8}", num);
	}

	save("stl.cpp");
}
	


===============================================================================
stl.cpp, 저장시간: 2024-03-12 화요일 오후 5:17:46 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        3월 12일 화요일                            (2주2)
// 
// --------------------------------------------------------------------------------

#include <iostream>
#include <print>
#include <random>
#include <array>

#include "save.h"

using namespace std;


default_random_engine dre;
uniform_int_distribution<> uidChar { 'a', 'z' };
uniform_int_distribution<> uidNum { 1, 99'999 };


class Dog {
    char c { (char)uidChar(dre) };
    int num { uidNum(dre) };

public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자: " << dog.c << ", 숫자: " << dog.num;
    }
};


int main() {
    array<Dog, 100> dogs;

    for(const Dog& dog : dogs) {
        cout << dog << endl;
    }

    save("stl.cpp");
}


===============================================================================
stl.cpp, 저장시간: 2024-03-12 화요일 오후 5:35:24 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        3월 12일 화요일                            (2주2)
// 
// --------------------------------------------------------------------------------

#include <iostream>
#include <print>
#include <random>
#include <array>

#include "save.h"

using namespace std;


default_random_engine dre;
uniform_int_distribution<> uidChar { 'a', 'z' };
uniform_int_distribution<> uidNum { 1, 99'999 };


class Dog {
    char c { (char)uidChar(dre) };
    int num { uidNum(dre) };

public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자: " << dog.c << ", 숫자: " << dog.num;
    }
};


int main() {
    array<Dog, 100> dogs;

    for(const Dog& dog : dogs) {
        cout << dog << endl;
    }

    // [문제] dogs를 binary mod/write로 파일에 기록하라.
    // 기록된 파일을 읽어서 num값이 가장 큰 Dog를 찾아 화면에 출력하라.

    save("stl.cpp");
}


===============================================================================
stl.cpp, 저장시간: 2024-03-12 화요일 오후 5:46:04 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        3월 12일 화요일                            (2주2)
// 
// --------------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <print>
#include <random>
#include <array>

#include "save.h"

using namespace std;


default_random_engine dre;
uniform_int_distribution<> uidChar { 'a', 'z' };
uniform_int_distribution<> uidNum { 1, 99'999 };


class Dog {
    char c { (char)uidChar(dre) };
    int num { uidNum(dre) };

public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자: " << dog.c << ", 숫자: " << dog.num;
    }
};


int main() {
    array<Dog, 100> dogs;

    for(const Dog& dog : dogs) {
        cout << dog << endl;
    }

    // [문제] dogs를 binary mod/write로 파일에 기록하라.
    ofstream out { "dogs", ios::binary };
    out.write((const char*)dogs.data(), sizeof(dogs));
    
    // 기록된 파일을 읽어서 num값이 가장 큰 Dog를 찾아 화면에 출력하라.


    save("stl.cpp");
}


===============================================================================
stl.cpp, 저장시간: 2024-03-12 화요일 오후 5:51:51 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        3월 12일 화요일                            (2주2)
// 
// --------------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <print>
#include <random>
#include <array>

#include "save.h"

using namespace std;


default_random_engine dre;
uniform_int_distribution<> uidChar { 'a', 'z' };
uniform_int_distribution<> uidNum { 1, 99'999 };


class Dog {
    char c { (char)uidChar(dre) };
    int num { uidNum(dre) };

public:
    bool operator<(const Dog& dog) const {
        return num < dog.num;
    }

    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자: " << dog.c << ", 숫자: " << dog.num;
    }
};


int main() {
    // [문제] dogs를 binary mod/write로 파일에 기록하라.
    //ofstream out { "dogs", ios::binary };
    //out.write((const char*)dogs.data(), sizeof(dogs));
    
    // 기록된 파일을 읽어서 num값이 가장 큰 Dog를 찾아 화면에 출력하라.
    array<Dog, 100> dogs;
    ifstream in { "dogs", ios::binary };
    in.read((char*)dogs.data(), sizeof(dogs));

    cout << *max_element(dogs.begin(), dogs.end()) << endl;

    save("stl.cpp");
}


===============================================================================
stl.cpp, 저장시간: 2024-03-12 화요일 오후 5:54:50 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        3월 12일 화요일                            (2주2)
// 
// --------------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <random>
#include <array>

#include "save.h"

using namespace std;


default_random_engine dre;
uniform_int_distribution<> uidChar { 'a', 'z' };
uniform_int_distribution<> uidNum { 1, 99'999 };


class Dog {
    char c { (char)uidChar(dre) };
    int num { uidNum(dre) };

public:
    bool operator<(const Dog& dog) const {
        return num < dog.num;
    }

    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자: " << dog.c << ", 숫자: " << dog.num;
    }
};


int main() {
    // [문제] dogs를 binary mod/write로 파일에 기록하라.
    //ofstream out { "dogs", ios::binary };
    //out.write((const char*)dogs.data(), sizeof(dogs));
    
    // 기록된 파일을 읽어서 num값이 가장 큰 Dog를 찾아 화면에 출력하라.
    array<Dog, 100> dogs;
    ifstream in { "dogs", ios::binary };
    in.read((char*)dogs.data(), sizeof(dogs));

    cout << *max_element(dogs.begin(), dogs.end()) << endl;

    save("stl.cpp");
}


===============================================================================
stl.cpp, 저장시간: 2024-03-18 월요일 오후 6:35:55 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        3월 12일 화요일                            (2주2)
// 
// --------------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <array>

#include "save.h"

using namespace std;

// [문제] "dogs" 파일은 binary모드로 기록하였다. 
// 여기에는 class Dog객체 100개를 write함수를 사용하여 기록하였다.
// class Dog의 멤버는 다음과 같다.
// 파일을 읽어 num값이 가장 큰 Dog 객체를 화면에 출력하라.

class Dog {
    char c;
    int num;

public:
    bool operator<(const Dog& other) {
        return num < other.num;
    }

    int getNum() const {
        return num;
    }

    void show() const {
        cout << "Dog: { " << c << ", " << num << " }" << endl;
    }

    //friend istream& operator>>(istream& in, Dog& dog) {
    //    return in.read((char*)&dog, sizeof(Dog));
    //}
};


int main() {
    ifstream in { "dogs", ios::binary };
    if(not in) {
        cout << "파일을 열 수 없다." << endl;
        return 0;
    }

    array<Dog, 100> dogs;
    in.read((char*)dogs.data(), sizeof(dogs));

    Dog maxDog;
    int maxValue { numeric_limits<int>::min() };
    for(const Dog& dog : dogs) {
        if(maxValue < dog.getNum()) {
            maxDog = dog;
            maxValue = dog.getNum();
        }
    }
    maxDog.show();

    max_element(dogs.begin(), dogs.end())->show();
    auto pos = max_element(
        dogs.begin(), dogs.end(),
        [](const Dog& a, const Dog& b) {
            return a.getNum() < b.getNum();
        }
    );
    pos->show();

    save("stl.cpp");
}


===============================================================================
stl.cpp, 저장시간: 2024-03-18 월요일 오후 6:36:51 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        3월 12일 화요일                            (2주2)
// 
// --------------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <array>

#include "save.h"

using namespace std;

// [문제] "dogs" 파일은 binary모드로 기록하였다. 
// 여기에는 class Dog객체 100개를 write함수를 사용하여 기록하였다.
// class Dog의 멤버는 다음과 같다.
// 파일을 읽어 num값이 가장 큰 Dog 객체를 화면에 출력하라.

class Dog {
    char c;
    int num;

public:
    int getNum() const {
        return num;
    }

    void show() const {
        cout << "Dog: { " << c << ", " << num << " }" << endl;
    }
};


int main() {
    ifstream in { "dogs", ios::binary };
    if(not in) {
        cout << "파일을 열 수 없다." << endl;
        return 0;
    }

    array<Dog, 100> dogs;
    in.read((char*)dogs.data(), sizeof(dogs));

    auto pos = max_element(
        dogs.begin(), dogs.end(),
        [](const Dog& a, const Dog& b) {
            return a.getNum() < b.getNum();
        }
    );
    pos->show();

    save("stl.cpp");
}


===============================================================================
stl.cpp, 저장시간: 2024-03-18 월요일 오후 6:50:02 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        3월 12일 화요일                            (2주2)
// 
// --------------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <array>
#include <algorithm>

#include "save.h"

using namespace std;

// [문제] "dogs" 파일은 binary모드로 기록하였다. 
// 여기에는 class Dog객체 100개를 write함수를 사용하여 기록하였다.
// class Dog의 멤버는 다음과 같다.
// 파일을 읽어 num값이 1000미만인 Dog객체의 수를 출력하라.

class Dog {
    char c;
    int num;

public:
    int getNum() const {
        return num;
    }

    void show() const {
        cout << "Dog: { " << c << ", " << num << " }" << endl;
    }
};


int main() {
    ifstream in { "dogs", ios::binary };
    if(not in) {
        cout << "파일을 열 수 없다." << endl;
        return 0;
    }

    array<Dog, 100> dogs;
    in.read((char*)dogs.data(), sizeof(dogs));

    int count = count_if(dogs.begin(), dogs.end(), [](const Dog& d) {
        return d.getNum() < 1000;
    });
    cout << count << endl;

    save("stl.cpp");
}


===============================================================================
stl.cpp, 저장시간: 2024-03-18 월요일 오후 6:55:43 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        3월 12일 화요일                            (2주2)
// 
// --------------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <array>
#include <algorithm>

#include "save.h"

using namespace std;

// [문제] "dogs" 파일은 binary모드로 기록하였다. 
// 여기에는 class Dog객체 100개를 write함수를 사용하여 기록하였다.
// class Dog의 멤버는 다음과 같다.
// 파일을 읽어 num값이 홀수인 Dog객체의 수를 출력하라.

class Dog {
    char c;
    int num;

public:
    int getNum() const {
        return num;
    }

    void show() const {
        cout << "Dog: { " << c << ", " << num << " }" << endl;
    }
};


int main() {
    ifstream in { "dogs", ios::binary };
    if(not in) {
        cout << "파일을 열 수 없다." << endl;
        return 0;
    }

    array<Dog, 100> dogs;
    in.read((char*)dogs.data(), sizeof(dogs));

    int count = count_if(dogs.begin(), dogs.end(), [](const Dog& dog) {
        return dog.getNum() % 2;
    });
    cout << count << endl;

    save("stl.cpp");
}


===============================================================================
stl.cpp, 저장시간: 2024-03-18 월요일 오후 6:56:05 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        3월 12일 화요일                            (2주2)
// 
// --------------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <array>
#include <algorithm>

#include "save.h"

using namespace std;

// [문제] "dogs" 파일은 binary모드로 기록하였다. 
// 여기에는 class Dog객체 100개를 write함수를 사용하여 기록하였다.
// class Dog의 멤버는 다음과 같다.
// 파일을 읽어 num값이 홀수인 Dog객체의 수를 출력하라.

class Dog {
    char c;
    int num;

public:
    int getNum() const {
        return num;
    }

    void show() const {
        cout << "Dog: { " << c << ", " << num << " }" << endl;
    }
};


int main() {
    ifstream in { "dogs", ios::binary };
    if(not in) {
        cout << "파일을 열 수 없다." << endl;
        return 0;
    }

    array<Dog, 100> dogs;
    in.read((char*)dogs.data(), sizeof(dogs));

    int count = count_if(dogs.begin(), dogs.end(), [](const Dog& dog) {
        return dog.getNum() & 1;
    });
    cout << count << endl;

    save("stl.cpp");
}


===============================================================================
stl.cpp, 저장시간: 2024-03-18 월요일 오후 6:56:18 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        3월 12일 화요일                            (2주2)
// 
// --------------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <array>
#include <algorithm>

#include "save.h"

using namespace std;

// [문제] "dogs" 파일은 binary모드로 기록하였다. 
// 여기에는 class Dog객체 100개를 write함수를 사용하여 기록하였다.
// class Dog의 멤버는 다음과 같다.
// 파일을 읽어 num값이 홀수인 Dog객체의 수를 출력하라.

class Dog {
    char c;
    int num;

public:
    int getNum() const {
        return num;
    }

    void show() const {
        cout << "Dog: { " << c << ", " << num << " }" << endl;
    }
};


int main() {
    ifstream in { "dogs", ios::binary };
    if(not in) {
        cout << "파일을 열 수 없다." << endl;
        return 0;
    }

    array<Dog, 100> dogs;
    in.read((char*)dogs.data(), sizeof(dogs));

    int count = count_if(dogs.begin(), dogs.end(), [](const Dog& dog) {
        return dog.getNum() & 1;
    });
    cout << count << endl;

    save("stl.cpp");
}


===============================================================================
stl.cpp, 저장시간: 2024-03-18 월요일 오후 6:56:35 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        3월 12일 화요일                            (2주2)
// 
// --------------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <array>
#include <algorithm>

#include "save.h"

using namespace std;

// [문제] "dogs" 파일은 binary모드로 기록하였다. 
// 여기에는 class Dog객체 100개를 write함수를 사용하여 기록하였다.
// class Dog의 멤버는 다음과 같다.
// 파일을 읽어 num값이 홀수인 Dog객체의 수를 출력하라.

class Dog {
    char c;
    int num;

public:
    int getNum() const {
        return num;
    }

    void show() const {
        cout << "Dog: { " << c << ", " << num << " }" << endl;
    }
};


int main() {
    ifstream in { "dogs", ios::binary };
    if(not in) {
        cout << "파일을 열 수 없다." << endl;
        return 0;
    }

    array<Dog, 100> dogs;
    in.read((char*)dogs.data(), sizeof(dogs));

    int count = count_if(dogs.begin(), dogs.end(), [](const Dog& dog) {
        return dog.getNum() % 2;
    });
    cout << count << endl;

    save("stl.cpp");
}


===============================================================================
stl.cpp, 저장시간: 2024-03-19 화요일 오후 3:40:41 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        3월 19일 화요일                            (3주2)
// 
// 실행 파일의 메모리 영역 - STACK, CODE, DATA, Free store(heap)
// --------------------------------------------------------------------------------

#include <iostream>
#include <string>
#include <array>

#include "save.h"

using namespace std;


int main() {
    string s { "메모리 관찰" };
    cout << "지역객체 string - " << addressof(s) << endl;

    array<int, 10> a;
    cout << "지역객체 array<int, 10> - " << endl;
    for(int i=0; i<a.size(); ++i) {
        cout << "a[" << i << "] - " << addressof(a[i]) << endl;
    }

    save("stl.cpp");
}


===============================================================================
stl.cpp, 저장시간: 2024-03-19 화요일 오후 4:05:44 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        3월 19일 화요일                            (3주2)
// 
// 실행 파일의 메모리 영역 - STACK, CODE, DATA, Free store(heap)
// --------------------------------------------------------------------------------

#include <iostream>
#include <string>
#include <array>

#include "save.h"

using namespace std;


void f() {
    int num { 123 };

    cout << "나는 함수 f 입니다." << endl;
    cout << "f()의 변수 num - " << addressof(num) << endl;
}

int gnum {};
string s { "전역 스트링"};


int main() {
    string s { "메모리 관찰" };
    cout << "지역객체 string - " << addressof(s) << endl;

    array<int, 10> a;
    cout << "지역객체 array<int, 10>" << endl;
    for(int i=0; i<a.size(); ++i) {
        cout << "a[" << i << "] - " << addressof(a[i]) << endl;
    }

    f();

    cout << endl << endl;

    cout << "전역 string - " << addressof(::s) << endl;
    cout << "전역 int - " << addressof(gnum) << endl;

    cout << endl << endl;

    cout << "함수가 기록되는 메모리 영역 - CODE segment, TEXT segment" << endl;
    cout << "main() - " << addressof(main) << endl;
    cout << "f() - " << addressof(f) << endl;
    cout << "save() - " << addressof(save) << endl;

    cout << endl << endl;

    string* p = new string[2] { "동적할당한 string1", "동적할당한 string2" };
    cout << p[0] << " - " << addressof(p[0]) << endl;
    cout << p[1] << " - " << addressof(p[1]) << endl;

    save("stl.cpp");
}


===============================================================================
stl.cpp, 저장시간: 2024-03-19 화요일 오후 4:13:05 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        3월 19일 화요일                            (3주2)
// 
// 실행 파일의 메모리 영역 - STACK, CODE, DATA, Free store(heap)
// --------------------------------------------------------------------------------

#include <iostream>
#include <string>

#include "save.h"

using namespace std;


void f() {
    int num { 123 };
}

int gnum {};

int main() {
    string s { "메모리 관찰" };

    f();

    string* p = new string[2];

    save("stl.cpp");
}


===============================================================================
stl.cpp, 저장시간: 2024-03-19 화요일 오후 5:01:18 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        3월 19일 화요일                            (3주2)
// 
// 실행 파일의 메모리 영역 - STACK, CODE, DATA, Free store(heap)
// --------------------------------------------------------------------------------

#include <iostream>
#include <string>

#include "save.h"

using namespace std;

// [문제] 프로그램에서 이용할 수 있는 전역변수의 최대크기는?

char num1[0x7FFF'FFFF];     // 전역변수의 최대 크기는 0x7FFF'FFFF -> 2GB
char num2[0x7FFF'FFFF];     // 오류	LNK1248 - 이미지 크기(1000056BF)가 허용 가능한 최대 크기(FFFFFFFF)를 초과합니다.



int main() {
    save("stl.cpp");
}


===============================================================================
stl.cpp, 저장시간: 2024-03-19 화요일 오후 5:02:27 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        3월 19일 화요일                            (3주2)
// 
// 실행 파일의 메모리 영역 - STACK, CODE, DATA, Free store(heap)
// --------------------------------------------------------------------------------

#include <iostream>
#include <string>

#include "save.h"

using namespace std;

// [문제] 프로그램에서 이용할 수 있는 전역변수의 최대크기는?

int num[0x7FFFFFFF / sizeof(int)];      // 대충 5억개


int main() {

    save("stl.cpp");
}


===============================================================================
stl.cpp, 저장시간: 2024-03-19 화요일 오후 5:08:00 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        3월 19일 화요일                            (3주2)
// 
// 실행 파일의 메모리 영역 - STACK, CODE, DATA, Free store(heap)
// --------------------------------------------------------------------------------

#include <iostream>
#include <string>

#include "save.h"

using namespace std;

// [문제] 프로그램에서 이용할 수 있는 전역변수의 최대크기는?

int num[1'0000'0000];


int main() {
    num[9999'9999] = 1234567890;

    cout << num[9999'9999] << endl;     // 사용 안하는 데이터는 무시하는 최적화가 적용됨. 실행파일은 몇kb밖에 안된다.

    save("stl.cpp");
}


===============================================================================
stl.cpp, 저장시간: 2024-03-19 화요일 오후 5:13:45 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        3월 19일 화요일                            (3주2)
// 
// 실행 파일의 메모리 영역 - STACK, CODE, DATA, Free store(heap)
// --------------------------------------------------------------------------------

#include <iostream>
#include <string>

#include "save.h"

using namespace std;

// [문제] 프로그램에서 이용할 수 있는 전역변수의 최대크기는?

int num[1'0000'0000] { 1 };   // 이걸 해줬더니 380~390MB가 나온다.


int main() {
    num[9999'9999] = 1234567890;

    cout << num[9999'9999] << endl;     // 사용 안하는 데이터는 무시하는 최적화가 적용됨. 실행파일은 몇kb밖에 안된다.

    cout << "키를 누르면 프로그램 끝 - ";
    char c;
    cin >> c;

    save("stl.cpp");
}


===============================================================================
stl.cpp, 저장시간: 2024-03-25 월요일 오후 5:49:16 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        3월 25일 월요일                            (4주1)
// 
// 동적할당 - RAII
// --------------------------------------------------------------------------------

#include <iostream>
#include <print>

#include "save.h"

using namespace std;

// [문제] 사용자가 입력한 int num만큼 메모리를 동적할당하라.
// int를 num개 동적할당한다.
// 이 메모리를 1부터 시작하는 정수로 채운다.
// 이 메모리의 합계를 화면에 출력한다.
// 이 모든 과정을 영원히 반복하라.

// run-time에서야 num값이 결정된다.
// new는 게임루프 안에서 돌리지 마라.
// compile time에 모든 값이 결정되는것 -> constexpr

int main() {
    while(true) {
        int num;
        cout << "숫자를 입력하라 - ";
        cin >> num;

        if(num == 0) {
            break;
        }

        int* darr = new int[num];       // darr는 스택에 잡히는 포인터 자료형
        for(int i=0; i<num; ++i) {
            darr[i] = i+1;
        }

        int sum {};
        for(int i=0; i<num; ++i) {
            sum += darr[i];
        }

        cout << "합계 - " << sum << endl;
    }

    save("stl.cpp");
}


===============================================================================
stl.cpp, 저장시간: 2024-03-25 월요일 오후 6:00:02 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        3월 25일 월요일                            (4주1)
// 
// 동적할당 - RAII
// --------------------------------------------------------------------------------

#include <iostream>
#include <print>
#include <numeric>

#include "save.h"

using namespace std;

// [문제] 사용자가 입력한 int num만큼 메모리를 동적할당하라.
// int를 num개 동적할당한다.
// 이 메모리를 1부터 시작하는 정수로 채운다.
// 이 메모리의 합계를 화면에 출력한다.
// 이 모든 과정을 영원히 반복하라.

// run-time에서야 num값이 결정된다.
// new는 게임루프 안에서 돌리지 마라.
// compile time에 모든 값이 결정되는것 -> constexpr

int main() {
    while(true) {
        int num;
        cout << "숫자 - ";
        cin >> num;

        if(num == 0) {
            break;
        }

        int* darr = new int[num];       // darr는 스택에 잡히는 포인터 자료형
        iota(darr, darr+num, 1);

        long long int sum = accumulate<int*, long long>(darr, darr+num, 0); 

        cout << "합계 - " << sum << endl;
    }

    save("stl.cpp");
}


===============================================================================
stl.cpp, 저장시간: 2024-03-25 월요일 오후 6:03:56 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        3월 25일 월요일                            (4주1)
// 
// 동적할당 - RAII
// --------------------------------------------------------------------------------

#include <iostream>
#include <print>
#include <numeric>

#include "save.h"

using namespace std;

// [문제] 사용자가 입력한 int num만큼 메모리를 동적할당하라.
// int를 num개 동적할당한다.
// 이 메모리를 1부터 시작하는 정수로 채운다.
// 이 메모리의 합계를 화면에 출력한다.
// 이 모든 과정을 영원히 반복하라.

// run-time에서야 num값이 결정된다.
// new는 게임루프 안에서 돌리지 마라.
// compile time에 모든 값이 결정되는것 -> constexpr

int main() {
    while(true) {
        int num;
        cout << "숫자 - ";
        cin >> num;

        if(num == 0) {
            break;
        }

        int* darr = new int[num];       // darr는 스택에 잡히는 포인터 자료형
        iota(darr, darr+num, 1);

        long long int sum = accumulate(darr, darr+num, 0LL);

        cout << "합계 - " << sum << endl;
    }

    save("stl.cpp");
}


===============================================================================
stl.cpp, 저장시간: 2024-03-25 월요일 오후 6:06:11 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        3월 25일 월요일                            (4주1)
// 
// 동적할당 - RAII
// --------------------------------------------------------------------------------

#include <iostream>
#include <print>
#include <numeric>

#include "save.h"

using namespace std;

// [문제] 사용자가 입력한 int num만큼 메모리를 동적할당하라.
// int를 num개 동적할당한다.
// 이 메모리를 1부터 시작하는 정수로 채운다.
// 이 메모리의 합계를 화면에 출력한다.
// 이 모든 과정을 영원히 반복하라.

// run-time에서야 num값이 결정된다.
// new는 게임루프 안에서 돌리지 마라.
// compile time에 모든 값이 결정되는것 -> constexpr

int main() {
    while(true) {
        int num;
        cout << "숫자 - ";
        cin >> num;

        if(num == 0) {
            break;
        }

        int* darr = new int[num];       // darr는 스택에 잡히는 포인터 자료형
        iota(darr, darr+num, 1);

        long long int sum = accumulate(darr, darr+num, 0LL);

        cout << "합계 - " << sum << endl;
    }

    save("stl.cpp");
}


===============================================================================
stl.cpp, 저장시간: 2024-03-25 월요일 오후 6:37:55 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        3월 25일 월요일                            (4주1)
// 
// 동적할당 - RAII
// 
// 앞으로 C++에서 사용하지 않아야 할 것들
// char*        -> string
// T[N]         -> array<T, N>
// T*           -> unique_ptr<T>, shared_ptr<T>
// --------------------------------------------------------------------------------

#include <iostream>
#include <print>
#include <numeric>

#include "save.h"

using namespace std;

class Dog {
public:
    Dog() { cout << "생성" << endl; };
    ~Dog() { cout << "소멸" << endl; };
};


int main() {
    Dog* p = new Dog;

    save("stl.cpp");
}



===============================================================================
stl.cpp, 저장시간: 2024-03-25 월요일 오후 6:50:47 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        3월 25일 월요일                            (4주1)
// 
// 동적할당 - RAII
// 
// 앞으로 C++에서 사용하지 않아야 할 것들
// char*        -> string
// T[N]         -> array<T, N>
// T*           -> unique_ptr<T>, shared_ptr<T>
// --------------------------------------------------------------------------------

#include <iostream>

#include "save.h"

using namespace std;

class Dog {
public:
    Dog() { cout << "생성" << endl; };
    ~Dog() { cout << "소멸" << endl; };
};


void f() {
    cout << "f 시작" << endl;
    Dog* p;
    p = new Dog;

    throw 1234;

    delete p;
    cout << "f 끝" << endl;
}


int main() {
    cout << "main 시작" << endl;

    try {
        f();
    }
    catch(...) {
        cout << "예외가 발생했어요" << endl;
    }

    cout << "main 끝" << endl;

    save("stl.cpp");
}


===============================================================================
stl.cpp, 저장시간: 2024-03-25 월요일 오후 7:05:12 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        3월 25일 월요일                            (4주1)
// 
// 동적할당 - RAII
// 
// 앞으로 C++에서 사용하지 않아야 할 것들
// char*        -> string
// T[N]         -> array<T, N>
// T*           -> unique_ptr<T>, shared_ptr<T>
// --------------------------------------------------------------------------------

#include <iostream>

#include "save.h"

using namespace std;

class Dog {
public:
    Dog() { cout << "생성" << endl; };
    ~Dog() { cout << "소멸" << endl; };
};

template<typename T>
class Smart_ptr {
    T* p;

public:
    Smart_ptr(T* p) : p { p } {}
    ~Smart_ptr() { delete p; }
};


void f() {
    cout << "f 시작" << endl;

    // 지역변수와 힙에 할당된 변수를 연결, 블럭을 나갈때 자동으로 소멸자 호출
    Smart_ptr<Dog> d { new Dog };

    throw 1234;
    
    cout << "f 끝" << endl;
}


int main() {
    cout << "main 시작" << endl;

    try {
        f();
    }
    catch(...) {
        cout << "예외가 발생했어요" << endl;
    }

    cout << "main 끝" << endl;

    save("stl.cpp");
}


===============================================================================
stl.cpp, 저장시간: 2024-03-26 화요일 오후 3:44:44 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        3월 26일 월요일                            (4주2)
// 
// 
// --------------------------------------------------------------------------------

#include <iostream>
#include <memory>

#include "save.h"

using namespace std;

class Dog {
public:
    Dog() { cout << "생성" << endl; };
    ~Dog() { cout << "소멸" << endl; };
};


int main() {
    unique_ptr<Dog> p { new Dog };

    save("stl.cpp");
}



===============================================================================
stl.cpp, 저장시간: 2024-03-26 화요일 오후 3:45:55 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        3월 26일 월요일                            (4주2)
// 
// 
// --------------------------------------------------------------------------------

#include <iostream>
#include <memory>

#include "save.h"

using namespace std;

class Dog {
public:
    Dog() { cout << "생성" << endl; };
    ~Dog() { cout << "소멸" << endl; };
};


int main() {
    cout << "메인 시작" << endl;

    unique_ptr<Dog[]> p { new Dog[10] };

    cout << "스마트 포인터" << endl;

    save("stl.cpp");

    cout << "메인 끝" << endl;
}



===============================================================================
stl.cpp, 저장시간: 2024-03-26 화요일 오후 3:46:10 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        3월 26일 월요일                            (4주2)
// 
// 
// --------------------------------------------------------------------------------

#include <iostream>
#include <memory>

#include "save.h"

using namespace std;

class Dog {
public:
    Dog() { cout << "생성" << endl; };
    ~Dog() { cout << "소멸" << endl; };
};


unique_ptr<Dog[]> p { new Dog[10] };


int main() {
    cout << "메인 시작" << endl;

    cout << "스마트 포인터" << endl;

    save("stl.cpp");

    cout << "메인 끝" << endl;
}



===============================================================================
stl.cpp, 저장시간: 2024-03-26 화요일 오후 3:48:37 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        3월 26일 월요일                            (4주2)
// 
// 
// --------------------------------------------------------------------------------

#include <iostream>
#include <memory>

#include "save.h"

using namespace std;

class Dog {
public:
    Dog() { cout << "생성" << endl; };
    ~Dog() { cout << "소멸" << endl; };
};


int main() {
    unique_ptr<Dog> p = make_unique<Dog>();

    save("stl.cpp");
}



===============================================================================
stl.cpp, 저장시간: 2024-03-26 화요일 오후 3:49:20 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        3월 26일 월요일                            (4주2)
// 
// 
// --------------------------------------------------------------------------------

#include <iostream>
#include <memory>

#include "save.h"

using namespace std;

class Dog {
public:
    Dog() { cout << "생성" << endl; };
    ~Dog() { cout << "소멸" << endl; };
};


int main() {
    unique_ptr<Dog[]> p = make_unique<Dog[]>(3);

    save("stl.cpp");
}



===============================================================================
stl.cpp, 저장시간: 2024-03-26 화요일 오후 4:12:01 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        3월 26일 월요일                            (4주2)
// 
// 5월 6일 월요일 강의 함
// --------------------------------------------------------------------------------

#include <iostream>
#include <fstream>

#include "save.h"

using namespace std;


// [문제] "stl.cpp"의 모든 소문자를 대문자로 바꿔 "stl대문자.txt"에 저장하라.


int main() {
    ifstream in { "stl.cpp" };
    if(not in) {
        cout << "파일을 불러오지 못했습니다." << endl;
        return 33333333;
    }

    ofstream out { "stl대문자.txt" };
    
    char c;
    in >> noskipws;
    while(in >> c) {
        c = toupper(c);
        out << c;
    }

    save("stl.cpp");
}



===============================================================================
stl.cpp, 저장시간: 2024-03-26 화요일 오후 4:26:54 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        3월 26일 월요일                            (4주2)
// 
// 5월 6일 월요일 강의 함
// --------------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <algorithm>

#include "save.h"

using namespace std;


// [문제] "stl.cpp"의 모든 소문자를 대문자로 바꿔 "stl대문자.txt"에 저장하라.


int main() {
    ifstream in { "stl.cpp" };
    if(not in) {
        cout << "파일을 불러오지 못했습니다." << endl;
        return 33333333;
    }

    ofstream out { "stl대문자.txt" };

    transform(istreambuf_iterator<char>{in}, {},
              ostreambuf_iterator<char>{out}, 
              [](char c) { 
                  return c = toupper(c); 
              }
    );

    save("stl.cpp");
}



===============================================================================
stl.cpp, 저장시간: 2024-03-26 화요일 오후 4:38:42 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        3월 26일 월요일                            (4주2)
// 
// 5월 6일 월요일 강의 함
// --------------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <array>

#include "save.h"

using namespace std;


uniform_int_distribution uid { 10'000, 99'999 };
default_random_engine dre;


// [문제] [10'000, 99'999]범위의 값을 갖는 int 100개를 만들어 주세요.
// qsort를 사용하여 오름차순으로 정렬하세요.
// 정렬한 결과를 화면에 보여주세요.  


int main() {
    array<int, 100> arr;
    generate(arr.begin(), arr.end(), []() { return uid(dre); });

    qsort(arr.data(), 100, sizeof(int), [](const void* x, const void* y) -> int {
        int a = *(int*)x;
        int b = *(int*)y;
        if(a < b) {
            return -1;
        }
        else {
            return 1;
        }
    });

    for(auto e : arr) {
        cout << e << endl;
    }

    save("stl.cpp");
}



===============================================================================
stl.cpp, 저장시간: 2024-03-26 화요일 오후 4:54:28 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        3월 26일 월요일                            (4주2)
// 
// 5월 6일 월요일 강의 함
// --------------------------------------------------------------------------------

#include <print>
#include <random>
#include <array>

#include "save.h"

using namespace std;


uniform_int_distribution uid { 1, 1'000 };
default_random_engine dre;


// [문제] [10'000, 99'999]범위의 값을 갖는 int 100개를 만들어 주세요.
// qsort를 사용하여 오름차순으로 정렬하세요.
// 정렬한 결과를 화면에 보여주세요.  


int main() {
    array<int, 100> arr;
    generate(arr.begin(), arr.end(), []() { return uid(dre); });

    qsort(arr.data(), arr.size(), sizeof(int), [](const void* x, const void* y) {
        return *(int*)x - *(int*)y;
    });

    for(auto e : arr) {
        print("{:8}", e);
    }

    save("stl.cpp");
}



===============================================================================
stl.cpp, 저장시간: 2024-04-01 월요일 오후 5:40:28 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        4월 1일 월요일                            (5주1)
// 
// 5월 6일 월요일 강의 함
// 4월 23일 시험
// 
// callable type
// sort할때 어떤 기준으로 정렬할지를 어떻게 sort함수에게 알려주나?
// 1. 함수 포인터를 전달한다.
// 2. 람다를 전달한다.
// --------------------------------------------------------------------------------

#include <print>
#include <random>
#include <array>

#include "save.h"

using namespace std;


uniform_int_distribution uid { 1, 1'000 };
default_random_engine dre;

array<int, 100> a;


// [문제] [1, 1'000]범위의 값을 갖는 int 100개를 만들어 주세요.
// std::sort를 사용하여 오름차순으로 정렬하세요.
// 정렬한 결과를 화면에 보여주세요.  


int main() {
    generate(a.begin(), a.end(), []() { return uid(dre); });

    println("generated");
    for(int num : a) {
        print("{:8}", num);
    }

    sort(a.begin(), a.end(), [](int a, int b) { return a > b; });
    
    println("sorted");
    for(int num : a) {
        print("{:8}", num);
    }

    save("stl.cpp");
}


===============================================================================
stl.cpp, 저장시간: 2024-04-01 월요일 오후 5:53:51 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        4월 1일 월요일                            (5주1)
// 
// 5월 6일 월요일 강의 함
// 4월 23일 시험
// 
// callable type
// sort할때 어떤 기준으로 정렬할지를 어떻게 sort함수에게 알려주나?
// 1. 함수 포인터를 전달한다.
// 2. 람다를 전달한다.
// --------------------------------------------------------------------------------

#include <iostream>
#include <print>
#include <random>
#include <array>

#include "save.h"

using namespace std;


uniform_int_distribution uid { 1, 1'000 };
default_random_engine dre;

array<int, 10000> a;
int cnt;


// [문제] [1, 1'000]범위의 값을 갖는 int 100개를 만들어 주세요.
// std::sort를 사용하여 오름차순으로 정렬하세요.
// 정렬한 결과를 화면에 보여주세요.  


int main() {
    generate(a.begin(), a.end(), []() { return uid(dre); });

    println("generated");
    for(int num : a) {
        print("{:8}", num);
    }

    sort(a.begin(), a.end(), [](int a, int b) { 
        //cout << a << "<->" << b << endl;
        cnt++;
        return a > b; 
    });
    
    println("sorted");
    for(int num : a) {
        print("{:8}", num);
    }

    cout << "sort의 비교함수 호출 - " << cnt << endl;

    save("stl.cpp");
}


===============================================================================
stl.cpp, 저장시간: 2024-04-01 월요일 오후 5:58:22 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        4월 1일 월요일                            (5주1)
// 
// 5월 6일 월요일 강의 함
// 4월 23일 시험
// 
// callable type
// sort할때 어떤 기준으로 정렬할지를 어떻게 sort함수에게 알려주나?
// 1. 함수 포인터를 전달한다.
// 2. 람다를 전달한다.
// --------------------------------------------------------------------------------

#include <iostream>
#include <print>
#include <random>
#include <array>

#include "save.h"

using namespace std;


uniform_int_distribution uid { 1, 1'000 };
default_random_engine dre;

array<int, 100> a;


// [문제] [1, 1'000]범위의 값을 갖는 int 100개를 만들어 주세요.
// std::sort를 사용하여 오름차순으로 정렬하세요.
// 정렬한 결과를 화면에 보여주세요.  


int main() {
    generate(a.begin(), a.end(), []() { return uid(dre); });

    println("generated");
    for(int num : a) {
        print("{:8}", num);
    }

    sort(a.begin(), a.end(), [](auto a, auto b) { return a > b; });
    
    println("sorted");
    for(int num : a) {
        print("{:8}", num);
    }

    save("stl.cpp");
}


===============================================================================
stl.cpp, 저장시간: 2024-04-01 월요일 오후 6:06:56 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        4월 1일 월요일                            (5주1)
// 
// 5월 6일 월요일 강의 함
// 4월 23일 시험
// 
// callable type
// sort할때 어떤 기준으로 정렬할지를 어떻게 sort함수에게 알려주나?
// 1. 함수 포인터를 전달한다.
// 2. 람다를 전달한다.
// --------------------------------------------------------------------------------

#include <iostream>
#include <print>
#include <random>
#include <array>

#include "save.h"

using namespace std;


// [문제] [1, 1'000]범위의 값을 갖는 int 100개를 만들어 주세요.
// std::sort를 사용하여 오름차순으로 정렬하세요.
// 정렬한 결과를 화면에 보여주세요.  

uniform_int_distribution uid { 1, 1'000 };
default_random_engine dre;

array<int, 100> a;

class Dog {
public:
    bool operator()(int a, int b) {
        return a > b;
    }
};


int main() {
    generate(a.begin(), a.end(), []() { return uid(dre); });

    println("generated");
    for(int num : a) {
        print("{:8}", num);
    }

    Dog dog;
    sort(a.begin(), a.end(), dog);
    
    println("sorted");
    for(int num : a) {
        print("{:8}", num);
    }

    save("stl.cpp");
}


===============================================================================
stl.cpp, 저장시간: 2024-04-01 월요일 오후 6:14:20 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        4월 1일 월요일                            (5주1)
// 
// 5월 6일 월요일 강의 함
// 4월 23일 시험
// 
// callable type
// sort할때 어떤 기준으로 정렬할지를 어떻게 sort함수에게 알려주나?
// 1. 함수 포인터를 전달한다.
// 2. 람다를 전달한다.
// --------------------------------------------------------------------------------

#include <iostream>
#include <print>
#include <random>
#include <array>

#include "save.h"

using namespace std;


// [문제] [1, 1'000]범위의 값을 갖는 int 100개를 만들어 주세요.
// std::sort를 사용하여 오름차순으로 정렬하세요.
// 정렬한 결과를 화면에 보여주세요.  

uniform_int_distribution uid { 1, 1'000 };
default_random_engine dre;

array<int, 100> a;

class Dog {
public:
    bool operator()(int a, int b) {
        return a > b;
    }
};


int main() {
    generate(a.begin(), a.end(), []() { return uid(dre); });

    println("generated");
    for(int num : a) {
        print("{:8}", num);
    }

    sort(a.begin(), a.end(), Dog {});
    
    println("sorted");
    for(int num : a) {
        print("{:8}", num);
    }

    save("stl.cpp");
}


===============================================================================
stl.cpp, 저장시간: 2024-04-01 월요일 오후 6:30:20 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        4월 1일 월요일                            (5주1)
// 
// 5월 6일 월요일 강의 함
// 4월 23일 시험
// 
// callable type - 무한한 타입이 있다.
// sort할때 어떤 기준으로 정렬할지를 어떻게 sort함수에게 알려주나?
// 1. 함수 포인터를 전달한다.
// 2. 람다를 전달한다.
// 3. ()연산자(function call operator)를 오버로딩한 클래스의 객체
// --------------------------------------------------------------------------------

#include <iostream>

#include "save.h"

using namespace std;



int main() {
    auto lambda = []() {
        cout << "안녕" << endl;
    };

    cout << typeid(lambda).name() << endl;

    auto lambda2 = []() {
        cout << "안녕" << endl;
    };

    cout << typeid(lambda2).name() << endl;

    save("stl.cpp");
}


===============================================================================
stl.cpp, 저장시간: 2024-04-01 월요일 오후 6:35:23 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        4월 1일 월요일                            (5주1)
// 
// 5월 6일 월요일 강의 함
// 4월 23일 시험
// 
// callable type - 무한한 타입이 있다.
// sort할때 어떤 기준으로 정렬할지를 어떻게 sort함수에게 알려주나?
// 1. 함수 포인터를 전달한다.
// 2. 람다를 전달한다.
// 3. ()연산자(function call operator)를 오버로딩한 클래스의 객체
// --------------------------------------------------------------------------------

#include <iostream>

#include "save.h"

using namespace std;


class lambda {
public:
    void operator()() {
        cout << "람다의 정체? (vs에서는)function object" << endl;
    }
};


int main() {
    lambda {}();

    save("stl.cpp");
}


===============================================================================
stl.cpp, 저장시간: 2024-04-01 월요일 오후 6:47:21 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        4월 1일 월요일                            (5주1)
// 
// 5월 6일 월요일 강의 함
// 4월 23일 시험
// 
// 호출 가능한 타입을 대표하는 타입을 만들었다 - function
// --------------------------------------------------------------------------------

#include <iostream>
#include <functional>

#include "save.h"

using namespace std;


void f(function<bool(int, int)> x) {
    cout << x(3, 5) << endl;
}


int main() {
    f([](int a, int b) { return false; });

    cout << typeid(function<bool(int, int)>).name() << endl;

    save("stl.cpp");
}


===============================================================================
stl.cpp, 저장시간: 2024-04-02 화요일 오후 3:51:55 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        4월 2일 화요일                            (5주2)
// 
// 5월 6일 월요일 강의 함
// 4월 23일 시험
// 
// 
// --------------------------------------------------------------------------------

#include <iostream>

#include "String.h"
#include "save.h"

using namespace std;


int main() {
    String s { "STL을 관찰하기 위한 클래스 입니다." };
    String t = s;

    cout << s << endl;
    cout << t << endl;

    t = String { "바뀜" };
    cout << s << endl;
    cout << t << endl;

    save("stl.cpp");
}


===============================================================================
stl.cpp, 저장시간: 2024-04-02 화요일 오후 4:20:51 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        4월 2일 화요일                            (5주2)
// 
// 5월 6일 월요일 강의 함
// 4월 23일 시험
// 
// 
// --------------------------------------------------------------------------------

#include <iostream>
#include <array>
#include <algorithm>

#include "String.h"
#include "save.h"

using namespace std;


int main() {
    array<String, 5> a { "2024년", "4월", "2일", "화요일", "즐거운 STL 시간" };

    // sort를 사용하여 a를 글자수 기준으로 오름차순으로 정렬한 후 출력하라. 

    sort(a.begin(), a.end(), [](const String& a, const String& b) { 
        return a.size() < b.size(); 
    });
    
    for(const String& s : a) {
        cout << s << endl;
    }

    save("stl.cpp");
}


===============================================================================
stl.cpp, 저장시간: 2024-04-02 화요일 오후 4:54:09 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        4월 2일 화요일                            (5주2)
// 
// 5월 6일 월요일 강의 함
// 4월 23일 시험
// 
// 
// --------------------------------------------------------------------------------

#include <iostream>
#include <array>
#include <algorithm>

#include "String.h"
#include "save.h"

using namespace std;

extern bool 관찰;


int main() {
    array<String, 5> a { "2024년", "4월", "2일", "화요일", "즐거운 STL 시간" };

    // sort를 사용하여 a를 글자수 기준으로 오름차순으로 정렬한 후 출력하라. 

    관찰 = true;
    sort(a.begin(), a.end(), [](const String& a, const String& b) { 
        return a.getLen() < b.getLen(); 
    });
    관찰 = false;
    
    for(const String& s : a) {
        cout << s << endl;
    }

    save("stl.cpp");
}



//[6] - 이동생성, 길이: 3, 주소: 000001CB63E91A60
//[2] - 이동할당, 길이: 6, 주소: 000001CB63E918C0
//[1] - 이동할당, 길이: 3, 주소: 000001CB63E91A60
//[6] - 소멸, 길이: 3, 주소: 0000000000000000
//[7] - 이동생성, 길이: 3, 주소: 000001CB63E91A40
//[3] - 이동할당, 길이: 6, 주소: 000001CB63E918C0
//[2] - 이동할당, 길이: 3, 주소: 000001CB63E91A40
//[7] - 소멸, 길이: 3, 주소: 0000000000000000
//[8] - 이동생성, 길이: 6, 주소: 000001CB63E91920
//[4] - 이동할당, 길이: 6, 주소: 000001CB63E91920
//[8] - 소멸, 길이: 6, 주소: 0000000000000000
//[9] - 이동생성, 길이: 15, 주소: 000001CB63E91E60
//[5] - 이동할당, 길이: 15, 주소: 000001CB63E91E60
//[9] - 소멸, 길이: 15, 주소: 0000000000000000

//[6] - 복사생성, 길이: 3, 주소: 00000240201A1890
//[2] - 복사할당, 길이: 6, 주소: 00000240201A1990
//[1] - 복사할당, 길이: 3, 주소: 00000240201A1910
//[6] - 소멸, 길이: 3, 주소: 00000240201A1890
//[7] - 복사생성, 길이: 3, 주소: 00000240201A18D0
//[3] - 복사할당, 길이: 6, 주소: 00000240201A1860
//[2] - 복사할당, 길이: 3, 주소: 00000240201A1960
//[7] - 소멸, 길이: 3, 주소: 00000240201A18D0
//[8] - 복사생성, 길이: 6, 주소: 00000240201A1830
//[4] - 복사할당, 길이: 6, 주소: 00000240201A18B0
//[8] - 소멸, 길이: 6, 주소: 00000240201A1830
//[9] - 복사생성, 길이: 15, 주소: 00000240201A1EB0
//[5] - 복사할당, 길이: 15, 주소: 00000240201A1FF0
//[9] - 소멸, 길이: 15, 주소: 00000240201A1EB0


===============================================================================
stl.cpp, 저장시간: 2024-04-02 화요일 오후 5:02:51 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        4월 2일 화요일                            (5주2)
// 
// 5월 6일 월요일 강의 함
// 4월 23일 시험
// 
// 
// --------------------------------------------------------------------------------

#include <iostream>
#include <array>
#include <algorithm>

#include "String.h"
#include "save.h"

using namespace std;

extern bool 관찰;


int main() {
    array<String, 5> a { 
        "jfdkl;fjdskajfkdsl",
        "jetufivonmk,34fjdkbvv8909a",
        "",
        "dkssud dhk toswm dktlsmsrnsk",
        "rjq.sk.dj.fuq.tmq.sl.ek."
    };

    //sort(a.begin(), a.end(), [](const String& a, const String& b) { 
    //    return a.getLen() < b.getLen(); 
    //});
    
    // [문제] sort를 사용하여 a가 관리하는 String을 오름차순으로 정렬한 후 출력하라

    for(String& s : a) {
        auto start = s.data();
        sort(start, start + s.getLen());
    }
    
    for(const String& s : a) {
        cout << s << endl;
    }

    save("stl.cpp");
}



//[6] - 이동생성, 길이: 3, 주소: 000001CB63E91A60
//[2] - 이동할당, 길이: 6, 주소: 000001CB63E918C0
//[1] - 이동할당, 길이: 3, 주소: 000001CB63E91A60
//[6] - 소멸, 길이: 3, 주소: 0000000000000000
//[7] - 이동생성, 길이: 3, 주소: 000001CB63E91A40
//[3] - 이동할당, 길이: 6, 주소: 000001CB63E918C0
//[2] - 이동할당, 길이: 3, 주소: 000001CB63E91A40
//[7] - 소멸, 길이: 3, 주소: 0000000000000000
//[8] - 이동생성, 길이: 6, 주소: 000001CB63E91920
//[4] - 이동할당, 길이: 6, 주소: 000001CB63E91920
//[8] - 소멸, 길이: 6, 주소: 0000000000000000
//[9] - 이동생성, 길이: 15, 주소: 000001CB63E91E60
//[5] - 이동할당, 길이: 15, 주소: 000001CB63E91E60
//[9] - 소멸, 길이: 15, 주소: 0000000000000000

//[6] - 복사생성, 길이: 3, 주소: 00000240201A1890
//[2] - 복사할당, 길이: 6, 주소: 00000240201A1990
//[1] - 복사할당, 길이: 3, 주소: 00000240201A1910
//[6] - 소멸, 길이: 3, 주소: 00000240201A1890
//[7] - 복사생성, 길이: 3, 주소: 00000240201A18D0
//[3] - 복사할당, 길이: 6, 주소: 00000240201A1860
//[2] - 복사할당, 길이: 3, 주소: 00000240201A1960
//[7] - 소멸, 길이: 3, 주소: 00000240201A18D0
//[8] - 복사생성, 길이: 6, 주소: 00000240201A1830
//[4] - 복사할당, 길이: 6, 주소: 00000240201A18B0
//[8] - 소멸, 길이: 6, 주소: 00000240201A1830
//[9] - 복사생성, 길이: 15, 주소: 00000240201A1EB0
//[5] - 복사할당, 길이: 15, 주소: 00000240201A1FF0
//[9] - 소멸, 길이: 15, 주소: 00000240201A1EB0


===============================================================================
stl.cpp, 저장시간: 2024-04-02 화요일 오후 5:17:45 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        4월 2일 화요일                            (5주2)
// 
// 5월 6일 월요일 강의 함
// 4월 23일 시험
// 
// 
// --------------------------------------------------------------------------------

#include <iostream>
#include <array>
#include <algorithm>

#include "String.h"
#include "save.h"

using namespace std;

extern bool 관찰;


int main() {
    array<String, 5> a { 
        "jfdkl;fjdskajfkdsl",
        "jetufivonmk,34fjdkbvv8909a",
        "",
        "dkssud dhk toswm dktlsmsrnsk",
        "rjq.sk.dj.fuq.tmq.sl.ek."
    };

    //sort(a.begin(), a.end(), [](const String& a, const String& b) { 
    //    return a.getLen() < b.getLen(); 
    //});
    
    // [문제] sort를 사용하여 a가 관리하는 String을 오름차순으로 정렬한 후 출력하라

    for(String& s : a) {
        auto start = s.getMem();
        sort(start, start + s.getLen());
        //sort(start, start + s.getLen(), [](char a, char b) {
        //    return a > b;
        //});
    }
    
    for(const String& s : a) {
        cout << s << endl;
    }

    save("stl.cpp");
}



===============================================================================
stl.cpp, 저장시간: 2024-04-02 화요일 오후 5:18:02 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        4월 2일 화요일                            (5주2)
// 
// 5월 6일 월요일 강의 함
// 4월 23일 시험
// 
// 
// --------------------------------------------------------------------------------

#include <iostream>
#include <array>
#include <algorithm>

#include "String.h"
#include "save.h"

using namespace std;

extern bool 관찰;


int main() {
    array<String, 5> a { 
        "jfdkl;fjdskajfkdsl",
        "jetufivonmk,34fjdkbvv8909a",
        "",
        "dkssud dhk toswm dktlsmsrnsk",
        "rjq.sk.dj.fuq.tmq.sl.ek."
    };

    //sort(a.begin(), a.end(), [](const String& a, const String& b) { 
    //    return a.getLen() < b.getLen(); 
    //});
    
    // [문제] sort를 사용하여 a가 관리하는 String을 오름차순으로 정렬한 후 출력하라

    for(const String& s : a) {
        auto start = s.getMem();
        sort(start, start + s.getLen());
        //sort(start, start + s.getLen(), [](char a, char b) {
        //    return a > b;
        //});
    }
    
    for(const String& s : a) {
        cout << s << endl;
    }

    save("stl.cpp");
}



===============================================================================
stl.cpp, 저장시간: 2024-04-08 월요일 오후 6:33:37 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        4월 2일 화요일                            (6주1)
// 
// 5월 6일 월요일 강의 함
// 4월 23일 시험
// 
// STL - Container
// --------------------------------------------------------------------------------

#include <iostream>
#include <array>

#include "String.h"
#include "save.h"

using namespace std;

extern bool 관찰;


int main() {
    array<int, 10> a { 1, 3, 5, 7, 9, 2, 4, 6, 8, 10 };
    
    for(array<int, 10>::iterator p=a.begin(); p!=a.end(); ++p) {
        cout << *p << endl;
    }

    save("stl.cpp");
}



===============================================================================
stl.cpp, 저장시간: 2024-04-08 월요일 오후 6:43:39 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        4월 2일 화요일                            (6주1)
// 
// 5월 6일 월요일 강의 함
// 4월 23일 시험
// 
// STL - Container
// --------------------------------------------------------------------------------

#include <iostream>
#include <array>
#include <list>

#include "String.h"
#include "save.h"

using namespace std;

extern bool 관찰;


int main() {
    list<int> a { 1, 3, 5, 7, 9, 2, 4, 6, 8, 10 };
    
    for(auto p=a.begin(); p!=a.end(); ++p) {
        cout << *p << endl;
    }
    for(const int& num : a) {       // syntactic sugar - 이런건 없는데 컴파일러가 위에껄로 바꿔준다. 
        cout << num << endl;
    }

    save("stl.cpp");
}



===============================================================================
stl.cpp, 저장시간: 2024-04-09 화요일 오후 3:44:33 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        4월 9일 화요일                            (6주2)
// 
// 5월 6일 월요일 강의 함
// 4월 23일 시험
//
// --------------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <array>
#include <algorithm>

#include "String.h"
#include "save.h"

using namespace std;

extern bool 관찰;


int main() {
    array<String, 100> a;

    // [문제] a에 "stl.cpp"에 있는 단어를 저장하라.
    // a를 길이 오름차순으로 정렬하라.
    // 화면에 출력하라.

    ifstream in { "stl.cpp" };
    if(not in) {
        cout << "파일 열기 실패" << endl;
        return 20240408;
    }

    for(int i=0; i<a.size(); ++i) {
        in >> a[i];
    }

    관찰 = true;
    sort(a.begin(), a.end(), [](const String& s1, const String& s2) {
        return s1.getLen() < s2.getLen();
    });
    관찰 = false;

    for(const auto& str : a) {
        cout << str << endl;
    }

    save("stl.cpp");
}



===============================================================================
stl.cpp, 저장시간: 2024-04-09 화요일 오후 4:00:00 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        4월 9일 화요일                            (6주2)
// 
// 5월 6일 월요일 강의 함
// 4월 23일 시험
//
// vector - dynamic array
// --------------------------------------------------------------------------------

#include <print>
#include <iostream>
#include <vector>
#include <random>
#include <algorithm>
#include <ranges>

#include "String.h"
#include "save.h"

using namespace std;

extern bool 관찰;


default_random_engine dre;
uniform_int_distribution<> uid { 1, 10'000 };


int main() {
    save("stl.cpp");

    while(true) {
        vector<int> v;

        // [예제] int 값 num을 입력받아 v에 [1, 10000]값을 갖는 int num개를 추가
        // 오름차순 정렬한다.
        // 값을 출력한다. 

        cout << "숫자를 알려주세요: ";
        int num;
        cin >> num;

        v.reserve(num);
        for(int i=0; i<num; ++i) {
            v.push_back(uid(dre));
        }

        sort(v.begin(), v.end(), [](int a, int b) {
            return a < b;
        });

        // 앞에서 100개만
        // ranges헤더
        for(auto n : v | views::take(100)) {
            print("{:8}", n);
        }
    }
}



===============================================================================
stl.cpp, 저장시간: 2024-04-09 화요일 오후 4:49:36 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        4월 9일 화요일                            (6주2)
// 
// 5월 6일 월요일 강의 함
// 4월 23일 시험
//
// vector - dynamic array
// --------------------------------------------------------------------------------

#include <iostream>
#include <vector>

#include "String.h"
#include "save.h"

using namespace std;

extern bool 관찰;


int main() {
    vector<String> v;

    관찰 = true;

    v.push_back("1");

    cout << endl << endl;

    v.push_back("22");

    cout << endl << endl;

    v.push_back("333");

    //관찰 = false;

    cout << endl << endl;

    save("stl.cpp");
}



===============================================================================
stl.cpp, 저장시간: 2024-04-09 화요일 오후 4:51:12 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        4월 9일 화요일                            (6주2)
// 
// 5월 6일 월요일 강의 함
// 4월 23일 시험
//
// vector - dynamic array
// --------------------------------------------------------------------------------

#include <iostream>
#include <vector>

#include "String.h"
#include "save.h"

using namespace std;

extern bool 관찰;


int main() {
    vector<String> v;

    v.reserve(20);

    관찰 = true;

    v.emplace_back("1");

    cout << endl << endl;

    v.emplace_back("22");

    cout << endl << endl;

    v.emplace_back("333");

    //관찰 = false;

    cout << endl << endl;

    save("stl.cpp");
}



===============================================================================
stl.cpp, 저장시간: 2024-04-09 화요일 오후 5:05:47 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        4월 9일 화요일                            (6주2)
// 
// 5월 6일 월요일 강의 함
// 4월 23일 시험
//
// vector - dynamic array
// --------------------------------------------------------------------------------

#include <iostream>
#include <vector>
#include <numeric>
#include <format>

#include "String.h"
#include "save.h"

using namespace std;

extern bool 관찰;


int main() {
    // [문제] 키보드에서 입력한 int값의 합계와 평균을 출력하라. 

    vector<int> numbers { istream_iterator<int> { cin }, {} };

    int sum = accumulate(numbers.begin(), numbers.end(), 0);

    cout << "합계 - " << sum << endl;
    cout << "평균 - " << format("{:.2f}", (double)sum / numbers.size()) << endl;

    save("stl.cpp");
}



===============================================================================
stl.cpp, 저장시간: 2024-04-09 화요일 오후 5:09:16 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        4월 9일 화요일                            (6주2)
// 
// 5월 6일 월요일 강의 함
// 4월 23일 시험
//
// vector - dynamic array
// --------------------------------------------------------------------------------

#include <iostream>
#include <vector>
#include <algorithm>

#include "String.h"
#include "save.h"

using namespace std;

extern bool 관찰;


int main() {
    // [문제] 키보드에서 입력한 String을 길이오름차순 정렬하여 출력하라.

    vector<String> numbers { istream_iterator<String> { cin }, {} };

    sort(numbers.begin(), numbers.end(), [](const String& a, const String& b) {
        return a.getLen() < b.getLen();
    });

    for(const String& s : numbers) {
        cout << s << endl;
    }

    save("stl.cpp");
}



===============================================================================
stl.cpp, 저장시간: 2024-04-09 화요일 오후 5:11:15 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        4월 9일 화요일                            (6주2)
// 
// 5월 6일 월요일 강의 함
// 4월 23일 시험
//
// vector - dynamic array
// --------------------------------------------------------------------------------

#include <iostream>
#include <vector>
#include <algorithm>

#include "String.h"
#include "save.h"

using namespace std;

extern bool 관찰;


int main() {
    // [문제] 키보드에서 입력한 String을 길이오름차순 정렬하여 출력하라.

    관찰 = true;

    vector<String> numbers { istream_iterator<String> { cin }, {} };

    sort(numbers.begin(), numbers.end(), [](const String& a, const String& b) {
        return a.getLen() < b.getLen();
    });

    for(const String& s : numbers) {
        cout << s << endl;
    }

    save("stl.cpp");
}



===============================================================================
stl.cpp, 저장시간: 2024-04-15 월요일 오후 5:46:25 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        4월 15일 월요일                            (7주1)
// 
// 5월 6일 월요일 강의 함
// 4월 23일 시험
//
// vector - dynamic array
// --------------------------------------------------------------------------------

#include <iostream>
#include <vector>

#include "String.h"
#include "save.h"

using namespace std;

extern bool 관찰;


int main() {
    vector<int> v;

    cout << "vector<int>의 최대 개수 - " << v.max_size() << endl;

    save("stl.cpp");
}



===============================================================================
stl.cpp, 저장시간: 2024-04-15 월요일 오후 5:49:11 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        4월 15일 월요일                            (7주1)
// 
// 5월 6일 월요일 강의 함
// 4월 23일 시험
//
// vector - dynamic array
// --------------------------------------------------------------------------------

#include <iostream>
#include <vector>

#include "String.h"
#include "save.h"

using namespace std;

extern bool 관찰;


int main() {
    관찰 = true;

    vector<String> v;

    v.push_back("1");

    v.push_back("22");

    save("stl.cpp");
}



===============================================================================
stl.cpp, 저장시간: 2024-04-15 월요일 오후 6:41:18 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        4월 15일 월요일                            (7주1)
// 
// 5월 6일 월요일 강의 함
// 4월 23일 시험
//
// vector - dynamic array
// --------------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <array>

#include "String.h"
#include "save.h"

using namespace std;

extern bool 관찰;


int main() {
    // [문제] "stl.cpp"에 있는 알파벳 소문자의 출현 횟수를 다음과 같이 출력하라
    // a - 20
    // b - 3
    // c - 1
    // ...
    // z - 2

    ifstream in { "stl.cpp" };
    if(not in) {
        return 0;
    }

    array<size_t, 'z'-'a'+1> counts { };

    char c;
    while(in >> c) {
        if(islower(c)) {
            ++counts[c-'a'];
        }
    }


    for(int i=0; i<counts.size(); ++i) {
        cout << char(i+'a') << " - " << counts[i] << endl;
    }

    save("stl.cpp");
}



===============================================================================
stl.cpp, 저장시간: 2024-04-15 월요일 오후 6:44:39 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        4월 15일 월요일                            (7주1)
// 
// 5월 6일 월요일 강의 함
// 4월 23일 시험
//
// vector - dynamic array
// --------------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <vector>

#include "String.h"
#include "save.h"

using namespace std;

extern bool 관찰;


int main() {
    // [문제] "stl.cpp"에 있는 알파벳 소문자의 출현 횟수를 다음과 같이 출력하라
    // a - 20
    // b - 3
    // c - 1
    // ...
    // z - 2

    ifstream in { "stl.cpp" };
    if(not in) {
        return 0;
    }

    vector<int> counts { };
    counts.resize('z'-'a'+1);

    char c;
    while(in >> c) {
        if(islower(c)) {
            ++counts[c-'a'];
        }
    }


    for(int i=0; i<counts.size(); ++i) {
        cout << char(i+'a') << " - " << counts[i] << endl;
    }

    save("stl.cpp");
}



===============================================================================
stl.cpp, 저장시간: 2024-04-15 월요일 오후 7:04:10 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        4월 15일 월요일                            (7주1)
// 
// 5월 6일 월요일 강의 함
// 4월 23일 시험
//
// vector - dynamic array
// --------------------------------------------------------------------------------

#include <iostream>
#include <vector>

#include "String.h"
#include "save.h"

using namespace std;

extern bool 관찰;


int main() {
    vector<int> v { 1, 3, 2, 3, 4, 5, 3, 3, 3, 5, 1, 65, 12, 6, 33, 333, 3333 };

    // [문제] v에서 3을 제거하고 출력하라.

    // erase-remove idiom
    v.erase(remove(v.begin(), v.end(), 3));

    for(int num : v) {
        cout << num << ' ';
    }
    cout << endl;

    save("stl.cpp");
}



===============================================================================
stl.cpp, 저장시간: 2024-04-16 화요일 오후 3:35:37 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        4월 16일 화요일                            (7주2)
// 
// 5월 6일 월요일 강의 함
// 4월 23일 시험
// --------------------------------------------------------------------------------

#include <iostream>
#include <vector>

#include "save.h"

using namespace std;


int main() {
    vector<int> v { 1, 3, 2, 3, 4, 5, 3, 3, 3, 5, 1, 65, 12, 6, 33, 333, 3333 };

    // [문제] v에서 3을 제거하고 출력하라.

    erase(v, 3);

    for(int num : v) {
        cout << num << ' ';
    }
    cout << endl;

    save("stl.cpp");
}



===============================================================================
stl.cpp, 저장시간: 2024-04-16 화요일 오후 3:37:14 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        4월 16일 화요일                            (7주2)
// 
// 5월 6일 월요일 강의 함
// 4월 23일 시험
// --------------------------------------------------------------------------------

#include <iostream>
#include <print>
#include <vector>

#include "save.h"

using namespace std;


int main() {
    vector<int> v(100);

    for(int num : v) {
        print("{:8}", num);
    }

    save("stl.cpp");
}



===============================================================================
stl.cpp, 저장시간: 2024-04-16 화요일 오후 3:37:23 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        4월 16일 화요일                            (7주2)
// 
// 5월 6일 월요일 강의 함
// 4월 23일 시험
// --------------------------------------------------------------------------------

#include <iostream>
#include <print>
#include <vector>

#include "save.h"

using namespace std;


int main() {
    vector<int> v { 100 };

    for(int num : v) {
        print("{:8}", num);
    }

    save("stl.cpp");
}



===============================================================================
stl.cpp, 저장시간: 2024-04-16 화요일 오후 3:53:31 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        4월 16일 화요일                            (7주2)
// 
// 5월 6일 월요일 강의 함
// 4월 23일 시험
// --------------------------------------------------------------------------------

#include <iostream>
#include <print>
#include <vector>
#include <numeric>
#include <ranges>

#include "save.h"

using namespace std;


int main() {
    vector<int> v(200);
    iota(v.begin(), v.end(), 1);

    // [문제] v에서 홀수를 제거하라.

    //erase_if(v, [](int n) { return n % 2; });

    auto result = v | views::filter([](int n) { return n % 2; });

    for(int num : result) {
        print("{:8}", num);
    }

    save("stl.cpp");
}



===============================================================================
stl.cpp, 저장시간: 2024-04-16 화요일 오후 3:53:52 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        4월 16일 화요일                            (7주2)
// 
// 5월 6일 월요일 강의 함
// 4월 23일 시험
// --------------------------------------------------------------------------------

#include <iostream>
#include <print>
#include <vector>
#include <numeric>
#include <ranges>

#include "save.h"

using namespace std;


int main() {
    vector<int> v(200);
    iota(v.begin(), v.end(), 1);

    // [문제] v에서 홀수를 제거하라.

    erase_if(v, [](int n) { return n % 2; });

    for(int num : v) {
        print("{:8}", num);
    }

    save("stl.cpp");
}



===============================================================================
stl.cpp, 저장시간: 2024-04-16 화요일 오후 4:28:08 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        4월 16일 화요일                            (7주2)
// 
// 5월 6일 월요일 강의 함
// 4월 23일 시험
// --------------------------------------------------------------------------------

#include <iostream>
#include <print>
#include <vector>
#include <numeric>

#include "String.h"
#include "save.h"

using namespace std;

extern bool 관찰;


int main() {
    vector<String> v { "1", "22", "4444", "55555" };

    auto p = v.begin();
    ++p;
    ++p;

    관찰 = true;
    v.insert(p, "333");
    관찰 = false;

    for(const String& s : v) {
        cout << s << endl;
    }

    save("stl.cpp");
}



===============================================================================
stl.cpp, 저장시간: 2024-04-16 화요일 오후 4:36:36 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        4월 16일 화요일                            (7주2)
// 
// 5월 6일 월요일 강의 함
// 4월 23일 시험
// 
// list
// --------------------------------------------------------------------------------

#include <iostream>
#include <list>

#include "String.h"
#include "save.h"

using namespace std;

extern bool 관찰;


int main() {
    list<String> v { "1", "22", "4444", "55555" };

    auto p = v.begin();
    ++p;
    ++p;

    관찰 = true;
    v.emplace(p, "333");
    관찰 = false;

    // 크기 늘리기 -> 원소 추가 -> 나머지 이동

    for(const String& s : v) {
        cout << s << endl;
    }

    save("stl.cpp");
}



===============================================================================
stl.cpp, 저장시간: 2024-04-16 화요일 오후 4:52:55 
===============================================================================
// --------------------------------------------------------------------------------
// 2024 1학기 STL  월910화78        4월 16일 화요일                            (7주2)
// 
// 5월 6일 월요일 강의 함
// 4월 23일 시험
// 
// deque - 임의접근, 양끝단 삽입 상수시간,
// --------------------------------------------------------------------------------

#include <iostream>
#include <deque>

#include "String.h"
#include "save.h"

using namespace std;

extern bool 관찰;


int main() {
    deque<int> d { 1, 2, 3, 4, 5, 6, 7 };

    for(int i=0; i<d.size(); ++i) {
        cout << &d[i] << endl;
    }

    d.push_front(0);
    cout << endl;

    for(int i=0; i<d.size(); ++i) {
        cout << &d[i] << endl;
    }

    d.push_back(8);
    cout << endl;

    for(int i=0; i<d.size(); ++i) {
        cout << &d[i] << endl;
    }

    for(int i=0; i<d.size(); ++i) {
        cout << &d[i] << endl;
    }

    d.push_back(9);
    cout << endl;

    for(int i=0; i<d.size(); ++i) {
        cout << &d[i] << endl;
    }

    // 4개씩 묶여있다?

    save("stl.cpp");
}
